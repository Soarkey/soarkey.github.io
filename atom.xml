<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Soarkey的博客</title>
  <subtitle>Stay hungry. Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://soarkey.github.io/"/>
  <updated>2017-03-17T13:27:27.950Z</updated>
  <id>https://soarkey.github.io/</id>
  
  <author>
    <name>Soarkey</name>
    <email>985686485@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>灰色预测模型解题步骤</title>
    <link href="https://soarkey.github.io/2017/03/16/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4/"/>
    <id>https://soarkey.github.io/2017/03/16/灰色预测模型解题步骤/</id>
    <published>2017-03-16T00:00:00.000Z</published>
    <updated>2017-03-17T13:27:27.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="灰色模型简介"><a href="#灰色模型简介" class="headerlink" title="灰色模型简介"></a>灰色模型简介</h1><p>白色系统是指系统内部特征是完全已知的；黑色系统是指系统内部信息完全未知的；<br>而灰色系统是介于白色系统和黑色系统之间的一种系统，灰色系统其内部一部分信息已知，另一部分信息未知或不确定。<br><a id="more"></a></p>
<p>灰色预测，是指对系统行为特征值的发展变化进行的预测，对既含有已知信息又含有不确定信息的系统进行的预测，也就是对在一定范围内变化的、与时间序列有关的灰过程进行预测。尽管灰过程中所显示的现象是随机的、杂乱无章的，但毕竟是有序的、有界的，因此得到的数据集合具备潜在的规律。灰色预测是利用这种规律建立灰色模型对灰色系统进行预测。</p>
<p>目前使用最广泛的灰色预测模型就是关于数列预测的一个变量、一阶微分的GM(1,1)模型。它是基于随机的原始时间序列，经按时间累加后所形成的新的时间序列呈现的规律可用一阶线性微分方程的解来逼近。经证明，经一阶线性微分方程的解逼近所揭示的原始时间序列呈指数变化规律。因此，当原始时间序列隐含着指数变化规律时，灰色模型GM(1,1)的预测是非常成功的。</p>
<h1 id="适用情景"><a href="#适用情景" class="headerlink" title="适用情景"></a>适用情景</h1><p>灰色模型适用于适合数据较少的情况（超过三组就行）,一般是在其他预测方法用不了时采用的方法。</p>
<h1 id="GM-1-1-模型"><a href="#GM-1-1-模型" class="headerlink" title="GM(1,1)模型"></a>GM(1,1)模型</h1><p>设有原始序列$x^{(0)}=(x^{(0)}(1),x^{(0)}(2),…,x^{(0)}(n)$,n为数据个数。<br>则根据$x^{(0)}$数据建立GM（1,1）模型来实现预测功能步骤如下:</p>
<h2 id="1-一次累加生成序列"><a href="#1-一次累加生成序列" class="headerlink" title="1.一次累加生成序列"></a>1.一次累加生成序列</h2><p>原始数据一次累加以便弱化随机序列的波动性和随机性，得到新数据序列:<br>$$<br>    x^{(1)}=(x^{(1)}(1),x^{(1)}(2),…,x^{(1)}(n)) \\<br>            =(x^{(0)}(1),x^{(0)}(1)+x^{(0)}(2),…,x^{(0)}(1)+x^{(0)}(2)+…+x^{(0)}(n))<br>$$<br>其中,$x^{(1)}(k)$中各数据表示对应前n项数据的累加。<br>$$x^{(1)}(k)=\sum_{i=1}^{k} x^{(0)}(i), k=1,2,…,n$$</p>
<h2 id="2-建立灰微分方程与白化微分方程"><a href="#2-建立灰微分方程与白化微分方程" class="headerlink" title="2.建立灰微分方程与白化微分方程"></a>2.建立灰微分方程与白化微分方程</h2><p>建立灰微分方程：<br>$$<br>    x^{(0)}(k)+az^{(k)}=b, k=2,3,…,n<br>$$<br>对应的白化微分方程为：<br>$$<br>    \frac{dx^{(1)}}{dt}+ax^{(t)}=b<br>$$</p>
<p>记$u=\begin{bmatrix}a ， b  \end{bmatrix}^{T}$</p>
<p>其中,a、b为待定系数,分别称为发展灰数和内生控制灰数（或称发展系数和灰色作用量）,a的有效区间是（-2,2）,只要求出参数a、b,就能求出$x^{(1)}(k)$,进而求出$x^{(1)}(k+1)$的未来预测值。</p>
<h2 id="3-对累加生成数据做均值生成序列B与常数项向量Y"><a href="#3-对累加生成数据做均值生成序列B与常数项向量Y" class="headerlink" title="3.对累加生成数据做均值生成序列B与常数项向量Y"></a>3.对累加生成数据做均值生成序列B与常数项向量Y</h2><p>$$  B=\begin{bmatrix}<br>        -\frac{1}{2}(x^{(1)}(1)+x^{(1)}(2)) &amp; 1 \\<br>        -\frac{1}{2}(x^{(1)}(2)+x^{(1)}(3)) &amp; 1  \\<br>        … &amp; …  \\<br>        -\frac{1}{2}(x^{(1)}(n-1)+x^{(1)}(n)) &amp; 1  \\<br>        \end{bmatrix},<br>    Y=\begin{bmatrix}<br>            x^{(0)}(2) ， x^{(0)}(3) ， … ， x^{(0)}(n)<br>      \end{bmatrix}^{T}<br>$$</p>
<h2 id="4-用最小二乘法求解灰参数u"><a href="#4-用最小二乘法求解灰参数u" class="headerlink" title="4.用最小二乘法求解灰参数u"></a>4.用最小二乘法求解灰参数u</h2><p>由最小二乘法,求使得关于u的函数$J(u)=(Y-Bu)^T(Y-Bu)$达到最小值的u的估计值为<br>$$<br>    \hat{u}=\begin{bmatrix}<br>                \hat{a} , \hat{b}<br>            \end{bmatrix}^T<br>            =(B^{T}B)^{-1}B^{T}Y<br>$$<br><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95" target="_blank" rel="external">最小二乘法——维基百科</a></p>
<h2 id="5-求解白化微分方程"><a href="#5-求解白化微分方程" class="headerlink" title="5.求解白化微分方程"></a>5.求解白化微分方程</h2><p>将灰参数$\hat{u}$带入微分方程$\frac{dx^{(1)}}{dt}+ax^{(t)}=b$中求解,得<br>$$<br>    \hat{x}^{(1)}(k+1)=\begin{pmatrix}x^{(0)}(1)-\frac{\hat{b}}{\hat{a}}\end{pmatrix}e^{-\hat{a}k}+\frac{\hat{b}}{\hat{a}},k=0,1,…,n-1,…<br>$$<br>即为GM(1,1)模型。</p>
<!--
待补充:
# 解题步骤
## 1.数据的检验与处理
首先，为了保证建模方法的可行性，需要对已知数据列作必要的检验处理。设参考数据为$x^{(1)}=(x^{(1)}(1),x^{(1)}(2),...,x^{(1)}(n))$,计算序列的级比:
$$\lambda(k)=\frac{x^{(0)}(k-1)}{x^{(0)}(k)},k=2,3,...,n$$

如果所有的级比都落在可容覆盖$$内

-->
<h1 id="例题解析"><a href="#例题解析" class="headerlink" title="例题解析"></a>例题解析</h1><p>北方某城市1986-1992年道理交通噪声平均声级数据见下表</p>
<blockquote>
<p>表5.1  城市交通噪声数据/dB(A)</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>年份</th>
<th>$L_{eq}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1986</td>
<td>71.1</td>
</tr>
<tr>
<td>2</td>
<td>1987</td>
<td>72.4</td>
</tr>
<tr>
<td>3</td>
<td>1988</td>
<td>72.4</td>
</tr>
<tr>
<td>4</td>
<td>1989</td>
<td>72.1</td>
</tr>
<tr>
<td>5</td>
<td>1990</td>
<td>71.4</td>
</tr>
<tr>
<td>6</td>
<td>1991</td>
<td>72.0</td>
</tr>
<tr>
<td>7</td>
<td>1992</td>
<td>71.6</td>
</tr>
</tbody>
</table>
<h2 id="1-级比检验"><a href="#1-级比检验" class="headerlink" title="1.级比检验"></a>1.级比检验</h2><p>建立交通噪声平均声级数据时间序列如下:<br>$x^{(1)}=(x^{(1)}(1),x^{(1)}(2),…,x^{(1)}(n))=(71.1,72.4,72.4,72.1,71.4,72.0,71.6)$<br>(1).求级比$\lambda(k)$,有<br>$$\lambda(k)=\frac{x^{(0)}(k-1)}{x^{(0)}(k)},$$<br>$$\lambda=(\lambda(2),\lambda(3),…,\lambda(7))=(0.982,1,1.0042,1.0098,0.9917,1.0056)$$<br>(2).级比判断<br>由于所有的$\lambda(k)\in[0.982,1.0098],k=2,…,7$,故可以用$x^{(0)}$作令人满意的GM(1,1)建模。</p>
<h2 id="2-GM-1-1-建模"><a href="#2-GM-1-1-建模" class="headerlink" title="2.GM(1,1)建模"></a>2.GM(1,1)建模</h2><p>(1).对原始数据$x^{(1)}$作一次累加，得<br>$$x^{(1)}=(71.1,143.5,215.9,288,359.4,431.4,503)$$<br>(2).构造数据矩阵B及数据向量Y,有<br>$$<br>    B=\begin{bmatrix}<br>        -\frac{1}{2}(x^{(1)}(1)+x^{(1)}(2)) &amp; 1 \\<br>        -\frac{1}{2}(x^{(1)}(2)+x^{(1)}(3)) &amp; 1  \\<br>        … &amp; …  \\<br>        -\frac{1}{2}(x^{(1)}(n-1)+x^{(1)}(7)) &amp; 1  \\<br>        \end{bmatrix},<br>    Y=\begin{bmatrix}<br>        x^{(0)}(2) \\<br>        x^{(0)}(3) \\<br>        … \\<br>        x^{(0)}(7)<br>      \end{bmatrix}<br>$$<br>(3)计算:<br>$$\hat{u}=\begin{bmatrix}\hat{a} \ \hat{b}\end{bmatrix}=(B^{T}B)^{-1}B^{T}Y=\begin{bmatrix}0.0023 \ 72.6573\end{bmatrix}$$,<br>于是得到$\hat{a}=0.0023,\hat{b}=72.6573$。<br>(4).建立模型:<br>$$\frac{dx^{(1)}}{dt}+\hat{a}x^{(t)}=\hat{b}$$<br>求解，得<br>$$\hat{x}^{(1)}(k+1)=\begin{pmatrix}x^{(0)}(1)-\frac{\hat{b}}{\hat{a}}\end{pmatrix}e^{-\hat{a}k}+\frac{\hat{b}}{\hat{a}}=-30929e^{-0.0023k}+31000 $$<br>(5).求生成序列预测值$\hat{x}^{(1)}(k+1)$及模型还原值$\hat{x}^{(0)}(k+1)$，令$k=1,2,3,4,5,6$,由(4)中解得的函数可算得$\hat{x}^{(1)}$,其中取$\hat{x}^{(1)}(1)=\hat{x}^{(0)}(1)=x^{(0)}(1)=71.1$,由$\hat{x}^{(0)}(k+1)=\hat{x}^{(1)}(k+1)-x^{(0)}(k)$,取$k=1,2,3,4,5,6$,得<br>$$\hat{x}^{(0)}=(\hat{x}^{(0)}(1),\hat{x}^{(0)}(2),…,\hat{x}^{(0)}(7))=(71.1,72.4,72.2,72.1,71.9,71.7,71.6) $$</p>
<h2 id="3-模型检验"><a href="#3-模型检验" class="headerlink" title="3.模型检验"></a>3.模型检验</h2><p>模型的各种检验指标值的计算结果见下表:</p>
<blockquote>
<p>表5.3.1 GM(1,1)模型检验表</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>年份</th>
<th>原始值</th>
<th>预测值</th>
<th>残差</th>
<th>相对误差</th>
<th>级比误差</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1986</td>
<td>71.1</td>
<td>71.1</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1987</td>
<td>72.4</td>
<td>72.4057</td>
<td>-0.0057</td>
<td>0.01%</td>
<td>0.0203</td>
</tr>
<tr>
<td>3</td>
<td>1988</td>
<td>72.4</td>
<td>72.2362</td>
<td>0.1638</td>
<td>0.23%</td>
<td>0.0023</td>
</tr>
<tr>
<td>4</td>
<td>1989</td>
<td>72.1</td>
<td>72.0671</td>
<td>0.0329</td>
<td>0.05%</td>
<td>-0.0018</td>
</tr>
<tr>
<td>5</td>
<td>1990</td>
<td>71.4</td>
<td>71.8984</td>
<td>-0.4984</td>
<td>0.7%</td>
<td>-0.0074</td>
</tr>
<tr>
<td>6</td>
<td>1991</td>
<td>72.0</td>
<td>71.7301</td>
<td>0.2699</td>
<td>0.37%</td>
<td>0.0107</td>
</tr>
<tr>
<td>7</td>
<td>1992</td>
<td>71.6</td>
<td>71.5622</td>
<td>0.0378</td>
<td>0.05%</td>
<td>-0.0032</td>
</tr>
</tbody>
</table>
<p>经验证，该模型的精度较高，可进行预测和预报。</p>
<h2 id="4-附MATLAB代码"><a href="#4-附MATLAB代码" class="headerlink" title="4.附MATLAB代码"></a>4.附MATLAB代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% 灰色模型</span></div><div class="line">clear;</div><div class="line">close all;</div><div class="line">clc;</div><div class="line"><span class="comment">% 输入数据</span></div><div class="line">x0=[<span class="number">71.1</span> <span class="number">72.4</span> <span class="number">72.4</span> <span class="number">72.1</span> <span class="number">71.4</span> <span class="number">72.0</span> <span class="number">71.6</span>]';  <span class="comment">% 注意为列向量</span></div><div class="line">n=<span class="built_in">length</span>(x0);</div><div class="line">lamda=x0(<span class="number">1</span>:n<span class="number">-1</span>)./x0(<span class="number">2</span>:n)    <span class="comment">% 计算级比</span></div><div class="line">range=minmax(lamda')        <span class="comment">% 计算级比的范围</span></div><div class="line">x1=cumsum(x0)               <span class="comment">% 累加运算</span></div><div class="line">B=[<span class="number">-0.5</span>*(x1(<span class="number">1</span>:n<span class="number">-1</span>)+x1(<span class="number">2</span>:n)),ones(n<span class="number">-1</span>,<span class="number">1</span>)];</div><div class="line">Y=x0(<span class="number">2</span>:n);</div><div class="line">u=B\Y;                      <span class="comment">% 拟合参数u(1)=a,u(2)=b</span></div><div class="line">syms x(t)</div><div class="line">x=dsolve(diff(x)+u(<span class="number">1</span>)*x == u(<span class="number">2</span>),x(<span class="number">0</span>) == x0(<span class="number">1</span>)); <span class="comment">% 求微分方程的特解 符号解</span></div><div class="line">xt=vpa(x,<span class="number">6</span>)                <span class="comment">% 以小数格式显示微分方程的解</span></div><div class="line">yuce1=subs(x,t,[<span class="number">0</span>:n<span class="number">-1</span>]);   <span class="comment">% 求已知数据的预测值</span></div><div class="line">yuce2=double(yuce1);       <span class="comment">% 符号数转为数值类型，否则无法做差分运算</span></div><div class="line"></div><div class="line">yuce=[x0(<span class="number">1</span>),diff(yuce2)]   <span class="comment">% 差分运算,还原数据</span></div><div class="line">epsilon=x0'-yuce           <span class="comment">% 计算残差</span></div><div class="line">delta=<span class="built_in">abs</span>(epsilon./x0')    <span class="comment">% 计算相对误差</span></div><div class="line">rho=<span class="number">1</span>-(<span class="number">1</span><span class="number">-0.5</span>*u(<span class="number">1</span>))/(<span class="number">1</span>+<span class="number">0.5</span>*u(<span class="number">1</span>))*lamda'   <span class="comment">% 计算级比偏差值，u(1)=a</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;灰色模型简介&quot;&gt;&lt;a href=&quot;#灰色模型简介&quot; class=&quot;headerlink&quot; title=&quot;灰色模型简介&quot;&gt;&lt;/a&gt;灰色模型简介&lt;/h1&gt;&lt;p&gt;白色系统是指系统内部特征是完全已知的；黑色系统是指系统内部信息完全未知的；&lt;br&gt;而灰色系统是介于白色系统和黑色系统之间的一种系统，灰色系统其内部一部分信息已知，另一部分信息未知或不确定。&lt;br&gt;
    
    </summary>
    
      <category term="灰色模型" scheme="https://soarkey.github.io/categories/%E7%81%B0%E8%89%B2%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="灰色预测" scheme="https://soarkey.github.io/tags/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/"/>
    
      <category term="数学模型" scheme="https://soarkey.github.io/tags/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql、java数据类型的对应关系</title>
    <link href="https://soarkey.github.io/2017/03/11/mysql%E4%B8%8Ejava%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94/"/>
    <id>https://soarkey.github.io/2017/03/11/mysql与java的数据类型对应/</id>
    <published>2017-03-11T00:00:00.000Z</published>
    <updated>2017-03-12T05:35:21.762Z</updated>
    
    <content type="html"><![CDATA[<p>mysql数据类型与java数据类型的对应关系：<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>显示长度</th>
<th>数据库类型</th>
<th>JAVA类型</th>
<th>JDBC类型索引(int)</th>
</tr>
</thead>
<tbody>
<tr>
<td>VARCHAR</td>
<td>L+N</td>
<td>VARCHAR</td>
<td>java.lang.String</td>
<td>12</td>
</tr>
<tr>
<td>CHAR</td>
<td>N</td>
<td>CHAR</td>
<td>java.lang.String</td>
<td>1</td>
</tr>
<tr>
<td>BLOB</td>
<td>L+N</td>
<td>BLOB</td>
<td>java.lang.byte[]</td>
<td>-4</td>
</tr>
<tr>
<td>TEXT</td>
<td>65535</td>
<td>VARCHAR</td>
<td>java.lang.String</td>
<td>-1</td>
</tr>
<tr>
<td>INTEGER</td>
<td>4</td>
<td>INTEGER UNSIGNED</td>
<td>java.lang.Long</td>
<td>4</td>
</tr>
<tr>
<td>TINYINT</td>
<td>3</td>
<td>TINYINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>-6</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>5</td>
<td>SMALLINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>5</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>8</td>
<td>MEDIUMINT UNSIGNED</td>
<td>java.lang.Integer</td>
<td>4</td>
</tr>
<tr>
<td>BIT</td>
<td>1</td>
<td>BIT</td>
<td>java.lang.Boolean</td>
<td>-7</td>
</tr>
<tr>
<td>BIGINT</td>
<td>20</td>
<td>BIGINT UNSIGNED</td>
<td>java.math.BigInteger</td>
<td>-5</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4+8</td>
<td>FLOAT</td>
<td>java.lang.Float</td>
<td>7</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>22</td>
<td>DOUBLE</td>
<td>java.lang.Double</td>
<td>8</td>
</tr>
<tr>
<td>DECIMAL</td>
<td>11</td>
<td>DECIMAL</td>
<td>java.math.BigDecimal</td>
<td>3</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>1</td>
<td>同TINYINT</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ID</td>
<td>11</td>
<td>PK (INTEGER UNSIGNED)</td>
<td>java.lang.Long</td>
<td>4</td>
</tr>
<tr>
<td>DATE</td>
<td>10</td>
<td>DATE</td>
<td>java.sql.Date</td>
<td>91</td>
</tr>
<tr>
<td>TIME</td>
<td>8</td>
<td>TIME</td>
<td>java.sql.Time</td>
<td>92</td>
</tr>
<tr>
<td>DATETIME</td>
<td>19</td>
<td>DATETIME</td>
<td>java.sql.Timestamp</td>
<td>93</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>19</td>
<td>TIMESTAMP</td>
<td>java.sql.Timestamp</td>
<td>93</td>
</tr>
<tr>
<td>YEAR</td>
<td>4</td>
<td>YEAR</td>
<td>java.sql.Date</td>
<td>91</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql数据类型与java数据类型的对应关系：&lt;br&gt;
    
    </summary>
    
      <category term="数据类型对应关系" scheme="https://soarkey.github.io/categories/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/"/>
    
    
      <category term="mysql" scheme="https://soarkey.github.io/tags/mysql/"/>
    
      <category term="java" scheme="https://soarkey.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于Cookie技术的介绍</title>
    <link href="https://soarkey.github.io/2017/03/05/%E5%85%B3%E4%BA%8Ecookie%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <id>https://soarkey.github.io/2017/03/05/关于cookie的介绍/</id>
    <published>2017-03-05T00:00:00.000Z</published>
    <updated>2017-03-11T13:25:33.999Z</updated>
    
    <content type="html"><![CDATA[<p>cookie基本知识介绍<br><a id="more"></a></p>
<h1 id="一、会话技术分类"><a href="#一、会话技术分类" class="headerlink" title="一、会话技术分类"></a>一、会话技术分类</h1><p>cookie技术：会话数据保存在浏览器客户端<br>session技术：会话数据保存在服务器端</p>
<h1 id="二、cookie使用步骤"><a href="#二、cookie使用步骤" class="headerlink" title="二、cookie使用步骤"></a>二、cookie使用步骤</h1><h2 id="1-构造Cookie"><a href="#1-构造Cookie" class="headerlink" title="1.构造Cookie"></a>1.构造Cookie</h2><ul>
<li>Cookie(java.lang.String name, java.lang.String value)</li>
</ul>
<h2 id="2-设置Cookie"><a href="#2-设置Cookie" class="headerlink" title="2.设置Cookie"></a>2.设置Cookie</h2><ul>
<li><p>void setPath(java.lang.String uri)       设置有效访问途径</p>
<blockquote>
<p>有效路径指的是cookie的有效路径保存位置，浏览器在有效路径下访问服务器时就会带着cookie信息，否则不带cookie信息。</p>
</blockquote>
</li>
<li><p>void setMaxAge(int expiry)               设置Cookie有效时间,单位为秒</p>
<blockquote>
<p><strong>注意细节：</strong><br><br>正整数：保存时间长度（1*30*24*60*60)</p>
<p>负整数：实现会话cookie, cookie保存在浏览器内存，随着浏览器的关闭而清除</p>
<ul>
<li>例如:cookie.setMaxAge(-1)</li>
</ul>
<p>零：删除同名的cookie</p>
</blockquote>
</li>
<li><p>void setValue(java.lang.String newValue)   设置Cookie的值  </p>
<blockquote>
<p><strong>注意细节</strong></p>
<p>Cookie数据类型只能保存非中文字符串类型的。浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB</p>
</blockquote>
</li>
</ul>
<h2 id="3-发送Cookie到浏览器保存"><a href="#3-发送Cookie到浏览器保存" class="headerlink" title="3.发送Cookie到浏览器保存"></a>3.发送Cookie到浏览器保存</h2><ul>
<li>void addCookie(Cookie cookie)           发送Cookie给浏览器</li>
</ul>
<h2 id="4-服务器接收Cookie"><a href="#4-服务器接收Cookie" class="headerlink" title="4.服务器接收Cookie"></a>4.服务器接收Cookie</h2><ul>
<li>Cookie[] request.getCookies                接收Cookie</li>
</ul>
<h1 id="三、Cookie的局限："><a href="#三、Cookie的局限：" class="headerlink" title="三、Cookie的局限："></a>三、Cookie的局限：</h1><p>1.Cookie只能存储字符串类型，不能保存对象</p>
<p>2.只能存储非中文数据</p>
<p>3.&nbsp;1个Cookie的容量不超过4KB</p>
<blockquote>
<p>如果要保存非字符串数据，超过4kb内容，只能使用session技术！</p>
</blockquote>
<h1 id="四、Cookie常见错误"><a href="#四、Cookie常见错误" class="headerlink" title="四、Cookie常见错误"></a>四、Cookie常见错误</h1><h2 id="1-数据类型错误"><a href="#1-数据类型错误" class="headerlink" title="1.数据类型错误"></a>1.数据类型错误</h2><blockquote>
<p><code>An invalid character [32] was present in the Cookie value</code></p>
</blockquote>
<p>错误代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">""</span>yyyy-MM-dd HH:mm:ss<span class="string">""</span>);</div><div class="line">String nowTime = simpleDateFormat.format(<span class="keyword">new</span> java.util.Date());</div><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">""</span>time<span class="string">""</span>nowTime);</div><div class="line">cookie.setMaxAge(<span class="number">3600</span>);</div><div class="line">response.addCookie(cookie);</div></pre></td></tr></table></figure></p>
<p>解决方案:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-dd HH:mm:ss&quot;&quot;);</div><div class="line">这一行代码yyyy-MM-dd和HH:mm:ss中间有个空格就会出错。</div><div class="line">如果改成这样</div><div class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-ddHH:mm:ss&quot;&quot;);</div><div class="line">把yyyy-MM-dd和HH:mm:ss连着写就没有错了。</div><div class="line">这是因为cookie不能存放除英文以外的数据，具有很大的局限性</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie基本知识介绍&lt;br&gt;
    
    </summary>
    
      <category term="Java Web" scheme="https://soarkey.github.io/categories/Java-Web/"/>
    
    
      <category term="Cookie" scheme="https://soarkey.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>利用hexo搭建博客</title>
    <link href="https://soarkey.github.io/2017/02/27/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://soarkey.github.io/2017/02/27/利用hexo搭建博客/</id>
    <published>2017-02-27T00:00:00.000Z</published>
    <updated>2017-03-04T06:19:17.308Z</updated>
    
    <content type="html"><![CDATA[<p>经过多天的学习与尝试，踩过不少坑，终于是把博客搭建成功了，下面我把我的博客搭建过程分享出来，希望能对你起到一定的帮助！</p>
<a id="more"></a>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="一、安装Node-js（必须）"><a href="#一、安装Node-js（必须）" class="headerlink" title="一、安装Node.js（必须）"></a>一、安装Node.js（必须）</h3><p>因为搭建博客所用的hexo框架是基于Node.js开发的，所以我们必须要先安装Node.js。<br> <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a></p>
<p>安装方法也比较简单，按照默认选项一项一项进行即可。</p>
<h3 id="二、安装Git（必须）"><a href="#二、安装Git（必须）" class="headerlink" title="二、安装Git（必须）"></a>二、安装Git（必须）</h3><p>Git的作用就是把本地仓库的内容提交到github网站上或者把github上的项目克隆到本地仓库中，对后续的hexo博客部署起着决定性的作用。<br> <a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a></p>
<p>由于众所周知的原因，国内访问Git比较困难，这里提供了一个国内网盘下载链接。<br> <a href="https://npm.taobao.org/mirrors/git-for-windows/2.12.0.windows.1/Git-2.12.0-64-bit.exe" target="_blank" rel="external">Git网盘下载地址</a></p>
<h3 id="三、注册Github账号（必须）"><a href="#三、注册Github账号（必须）" class="headerlink" title="三、注册Github账号（必须）"></a>三、注册Github账号（必须）</h3><p>github一个通过Git进行版本控制的软件源代码托管服务。我们的hexo博客正是搭建与此基础上，所以需要开发者先申请注册github账号，并且创立一个名为yourname.github.io的仓库（yourname为你的github账户名称）。<br>另外github上聚集了许多著名的技术界公司和顶尖开发者的开源项目，体现了技术前沿的发展趋势，是我们一个不可多得的资料库。<br><a href="https://github.com" target="_blank" rel="external">Github官网</a></p>
<h2 id="安装配置Hexo-针对windows"><a href="#安装配置Hexo-针对windows" class="headerlink" title="安装配置Hexo (针对windows)"></a>安装配置Hexo (针对windows)</h2><h4 id="一、-安装hexo"><a href="#一、-安装hexo" class="headerlink" title="一、 安装hexo"></a>一、 安装hexo</h4><p>创建一个文件夹，命名为blog（根据自己喜好命名）,在Gitbash中执行以下git命令来安装hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h4 id="二、-建立文件"><a href="#二、-建立文件" class="headerlink" title="二、 建立文件"></a>二、 建立文件</h4><p>安装完成hexo后，执行以下命令，hexo将会在指定文件夹下新建所需文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>新建完成后，指定文件夹的目录如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── <span class="built_in">source</span></div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<h4 id="三、-生成静态页面"><a href="#三、-生成静态页面" class="headerlink" title="三、 生成静态页面"></a>三、 生成静态页面</h4><p>执行以下命令，让hexo生成静态页面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>可简写为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure></p>
<p>执行完后会在blog目录里生成public文件夹，里面存放着发布的博客内容。</p>
<h4 id="四、-在本地预览"><a href="#四、-在本地预览" class="headerlink" title="四、 在本地预览"></a>四、 在本地预览</h4><p>执行以下命令，启动hexo服务，进行本地hexo博客效果预览与调试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>可简写为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>完成后打开浏览器输入网址<a href="http://localhost:4000，" target="_blank" rel="external">http://localhost:4000，</a><br>如果正常显示hexo默认初始页面，说明之前的配置正确，<br>hexo已经在本地部署成功。</p>
<h2 id="常见hexo配置错误"><a href="#常见hexo配置错误" class="headerlink" title="常见hexo配置错误"></a>常见hexo配置错误</h2><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，hexo的基本配置步骤已经完成。<br>那我们怎么挑选适合自己博客的主题、更改博客显示的信息以及书写博客呢？<br>请参考下一篇文章《yilia主题的配置与使用》</p>
<p>参考资料：<a href="https://hexo.io/zh-cn/docs" target="_blank" rel="external">Hexo中文文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过多天的学习与尝试，踩过不少坑，终于是把博客搭建成功了，下面我把我的博客搭建过程分享出来，希望能对你起到一定的帮助！&lt;/p&gt;
    
    </summary>
    
      <category term="hexo教程" scheme="https://soarkey.github.io/categories/hexo%E6%95%99%E7%A8%8B/"/>
    
      <category term="博客搭建" scheme="https://soarkey.github.io/categories/hexo%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://soarkey.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="https://soarkey.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
