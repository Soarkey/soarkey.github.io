[{"title":"mysql、java数据类型的对应关系","date":"2017-03-11T00:00:00.000Z","path":"2017/03/11/mysql与java的数据类型对应/","text":"mysql数据类型与java数据类型的对应关系： 类型名称显示长度数据库类型JAVA类型JDBC类型索引(int)VARCHARL+NVARCHARjava.lang.String12CHARNCHARjava.lang.String1BLOBL+NBLOBjava.lang.byte[]-4TEXT65535VARCHARjava.lang.String-1INTEGER4INTEGER UNSIGNEDjava.lang.Long4TINYINT3TINYINT UNSIGNEDjava.lang.Integer-6SMALLINT5SMALLINT UNSIGNEDjava.lang.Integer5MEDIUMINT8MEDIUMINT UNSIGNEDjava.lang.Integer4BIT1BITjava.lang.Boolean-7BIGINT20BIGINT UNSIGNEDjava.math.BigInteger-5FLOAT4+8FLOATjava.lang.Float7DOUBLE22DOUBLEjava.lang.Double8DECIMAL11DECIMALjava.math.BigDecimal3BOOLEAN1同TINYINTID11PK (INTEGER UNSIGNED)java.lang.Long4DATE10DATEjava.sql.Date91TIME8TIMEjava.sql.Time92DATETIME19DATETIMEjava.sql.Timestamp93TIMESTAMP19TIMESTAMPjava.sql.Timestamp93YEAR4YEARjava.sql.Date91","tags":[{"name":"mysql","slug":"mysql","permalink":"https://soarkey.github.io/tags/mysql/"},{"name":"java","slug":"java","permalink":"https://soarkey.github.io/tags/java/"}]},{"title":"关于Cookie技术的介绍","date":"2017-03-05T00:00:00.000Z","path":"2017/03/05/关于cookie的介绍/","text":"cookie基本知识介绍 一、会话技术分类cookie技术：会话数据保存在浏览器客户端session技术：会话数据保存在服务器端 二、cookie使用步骤1.构造Cookie Cookie(java.lang.String name, java.lang.String value) 2.设置Cookie void setPath(java.lang.String uri) 设置有效访问途径 有效路径指的是cookie的有效路径保存位置，浏览器在有效路径下访问服务器时就会带着cookie信息，否则不带cookie信息。 void setMaxAge(int expiry) 设置Cookie有效时间,单位为秒 注意细节：正整数：保存时间长度（1*30*24*60*60) 负整数：实现会话cookie, cookie保存在浏览器内存，随着浏览器的关闭而清除 例如:cookie.setMaxAge(-1) 零：删除同名的cookie void setValue(java.lang.String newValue) 设置Cookie的值 注意细节 Cookie数据类型只能保存非中文字符串类型的。浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB 3.发送Cookie到浏览器保存 void addCookie(Cookie cookie) 发送Cookie给浏览器 4.服务器接收Cookie Cookie[] request.getCookies 接收Cookie 三、Cookie的局限：1.Cookie只能存储字符串类型，不能保存对象 2.只能存储非中文数据 3.&nbsp;1个Cookie的容量不超过4KB 如果要保存非字符串数据，超过4kb内容，只能使用session技术！ 四、Cookie常见错误1.数据类型错误 An invalid character [32] was present in the Cookie value 错误代码:12345SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"\"yyyy-MM-dd HH:mm:ss\"\");String nowTime = simpleDateFormat.format(new java.util.Date());Cookie cookie = new Cookie(\"\"time\"\"nowTime);cookie.setMaxAge(3600);response.addCookie(cookie); 解决方案:123456SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-dd HH:mm:ss&quot;&quot;);这一行代码yyyy-MM-dd和HH:mm:ss中间有个空格就会出错。如果改成这样SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-ddHH:mm:ss&quot;&quot;);把yyyy-MM-dd和HH:mm:ss连着写就没有错了。这是因为cookie不能存放除英文以外的数据，具有很大的局限性","tags":[{"name":"Cookie","slug":"Cookie","permalink":"https://soarkey.github.io/tags/Cookie/"}]},{"title":"利用hexo搭建博客","date":"2017-02-27T00:00:00.000Z","path":"2017/02/27/利用hexo搭建博客/","text":"经过多天的学习与尝试，踩过不少坑，终于是把博客搭建成功了，下面我把我的博客搭建过程分享出来，希望能对你起到一定的帮助！ 准备阶段一、安装Node.js（必须）因为搭建博客所用的hexo框架是基于Node.js开发的，所以我们必须要先安装Node.js。 Node.js官网 安装方法也比较简单，按照默认选项一项一项进行即可。 二、安装Git（必须）Git的作用就是把本地仓库的内容提交到github网站上或者把github上的项目克隆到本地仓库中，对后续的hexo博客部署起着决定性的作用。 Git官网 由于众所周知的原因，国内访问Git比较困难，这里提供了一个国内网盘下载链接。 Git网盘下载地址 三、注册Github账号（必须）github一个通过Git进行版本控制的软件源代码托管服务。我们的hexo博客正是搭建与此基础上，所以需要开发者先申请注册github账号，并且创立一个名为yourname.github.io的仓库（yourname为你的github账户名称）。另外github上聚集了许多著名的技术界公司和顶尖开发者的开源项目，体现了技术前沿的发展趋势，是我们一个不可多得的资料库。Github官网 安装配置Hexo (针对windows)一、 安装hexo创建一个文件夹，命名为blog（根据自己喜好命名）,在Gitbash中执行以下git命令来安装hexo。1$ npm install -g hexo-cli 二、 建立文件安装完成hexo后，执行以下命令，hexo将会在指定文件夹下新建所需文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 三、 生成静态页面执行以下命令，让hexo生成静态页面。1$ hexo generate 可简写为1$ hexo g 执行完后会在blog目录里生成public文件夹，里面存放着发布的博客内容。 四、 在本地预览执行以下命令，启动hexo服务，进行本地hexo博客效果预览与调试。1$ hexo server 可简写为1$ hexo s 完成后打开浏览器输入网址http://localhost:4000，如果正常显示hexo默认初始页面，说明之前的配置正确，hexo已经在本地部署成功。 常见hexo配置错误结语至此，hexo的基本配置步骤已经完成。那我们怎么挑选适合自己博客的主题、更改博客显示的信息以及书写博客呢？请参考下一篇文章《yilia主题的配置与使用》 参考资料：Hexo中文文档","tags":[{"name":"hexo","slug":"hexo","permalink":"https://soarkey.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://soarkey.github.io/tags/blog/"}]},{"title":"Hello World","date":"2017-02-25T20:46:25.000Z","path":"2017/02/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start$$\\frac{ \\partial u} {\\partial t} = h^2 \\left( \\frac{ \\partial^2 u}{ \\partial x^2} + \\frac{ \\partial^2 u}{ \\partial y^2} + \\frac{ \\partial^2 u}{ \\partial z^2} \\right)$$ Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment code 12import java.util.Scanner;System.out.println(\"hello world!\");","tags":[{"name":"hello","slug":"hello","permalink":"https://soarkey.github.io/tags/hello/"},{"name":"world","slug":"world","permalink":"https://soarkey.github.io/tags/world/"}]}]