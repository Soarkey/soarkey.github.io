[{"title":"Java三种代理模式：静态代理、动态代理和cglib代理","date":"2017-07-19T00:00:00.000Z","path":"2017/07/19/Java三种代理模式：静态代理、动态代理和cglib代理/","text":"一、代理模式介绍代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。 简言之，代理模式就是设置一个中间代理来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。 代理模式UML类图 举个例子，我们生活中经常到火车站去买车票，但是人一多的话，就会非常拥挤，于是就有了代售点，我们能从代售点买车票了。这其中就是代理模式的体现，代售点代理了火车站对象，提供购买车票的方法。 二、静态代理这种代理方式需要代理对象和目标对象实现一样的接口。 优点：可以在不修改目标对象的前提下扩展目标对象的功能。 缺点： 冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类。 不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改。 举例：保存用户功能的静态代理实现 接口类： IUserDao 12345package com.proxy;public interface IUserDao &#123;truepublic void save();&#125; 目标对象：UserDao 123456789package com.proxy;public class UserDao implements IUserDao&#123;true@Overridetruepublic void save() &#123;truetrueSystem.out.println(\"保存数据\");true&#125;&#125; 静态代理对象：UserDapProxy 需要实现IUserDao接口！ 12345678910111213141516package com.proxy;public class UserDaoProxy implements IUserDao&#123;trueprivate IUserDao target;truepublic UserDaoProxy(IUserDao target) &#123;truetruethis.target = target;true&#125;truetrue@Overridetruepublic void save() &#123;truetrueSystem.out.println(\"开启事务\");//扩展了额外功能truetruetarget.save();truetrueSystem.out.println(\"提交事务\");true&#125;&#125; 测试类：TestProxy 1234567891011121314package com.proxy;import org.junit.Test;public class StaticUserProxy &#123;true@Testtruepublic void testStaticProxy()&#123;truetrue//目标对象truetrueIUserDao target = new UserDao();truetrue//代理对象truetrueUserDaoProxy proxy = new UserDaoProxy(target);truetrueproxy.save();true&#125;&#125; 输出结果 123开启事务保存数据提交事务 三、动态代理动态代理利用了JDK API，动态地在内存中构建代理对象，从而实现对目标对象的代理功能。动态代理又被称为JDK代理或接口代理。 静态代理与动态代理的区别主要在： 静态代理在编译时就已经实现，编译完成后代理类是一个实际的class文件 动态代理是在运行时动态生成的，即编译完成后没有实际的class文件，而是在运行时动态生成类字节码，并加载到JVM中 特点：动态代理对象不需要实现接口，但是要求目标对象必须实现接口，否则不能使用动态代理。 JDK中生成代理对象主要涉及的类有 java.lang.reflect Proxy，主要方法为123456static Object newProxyInstance(ClassLoader loader, //指定当前目标对象使用类加载器 Class&lt;?&gt;[] interfaces, //目标对象实现的接口的类型 InvocationHandler h //事件处理器) //返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。 java.lang.reflect InvocationHandler，主要方法为12 Object invoke(Object proxy, Method method, Object[] args) // 在代理实例上处理方法调用并返回结果。 举例：保存用户功能的动态代理实现 接口类： IUserDao 12345package com.proxy;public interface IUserDao &#123;truepublic void save();&#125; 目标对象：UserDao 123456789package com.proxy;public class UserDao implements IUserDao&#123;true@Overridetruepublic void save() &#123;truetrueSystem.out.println(\"保存数据\");true&#125;&#125; 动态代理对象：UserProxyFactory 1234567891011121314151617181920212223242526272829303132package com.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class ProxyFactory &#123;trueprivate Object target;// 维护一个目标对象truepublic ProxyFactory(Object target) &#123;truetruethis.target = target;true&#125;true// 为目标对象生成代理对象truepublic Object getProxyInstance() &#123;truetruereturn Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),truetruetruetruenew InvocationHandler() &#123;truetruetruetruetrue@Overridetruetruetruetruetruepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;truetruetruetruetruetrueSystem.out.println(\"开启事务\");truetruetruetruetruetrue// 执行目标对象方法truetruetruetruetruetrueObject returnValue = method.invoke(target, args);truetruetruetruetruetrueSystem.out.println(\"提交事务\");truetruetruetruetruetruereturn null;truetruetruetruetrue&#125;truetruetruetrue&#125;);true&#125;&#125; 测试类：TestProxy 123456789101112131415package com.proxy;import org.junit.Test;public class TestProxy &#123;true@Testtruepublic void testDynamicProxy ()&#123;truetrueIUserDao target = new UserDao();truetrueSystem.out.println(target.getClass()); //输出目标对象信息truetrueIUserDao proxy = (IUserDao) new ProxyFactory(target).getProxyInstance();truetrueSystem.out.println(proxy.getClass()); //输出代理对象信息truetrueproxy.save(); //执行代理方法true&#125;&#125; 输出结果 12345class com.proxy.UserDaoclass com.sun.proxy.$Proxy4开启事务保存数据提交事务 四、cglib代理 cglib is a powerful, high performance and quality Code Generation Library. It can extend JAVA classes and implement interfaces at runtime. cglib (Code Generation Library )是一个第三方代码生成类库，运行时在内存中动态生成一个子类对象从而实现对目标对象功能的扩展。 cglib特点 JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口。如果想代理没有实现接口的类，就可以使用CGLIB实现。 CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception（拦截）。 CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它需要你对JVM内部结构包括class文件的格式和指令集都很熟悉。 cglib与动态代理最大的区别就是 使用动态代理的对象必须实现一个或多个接口 使用cglib代理的对象则无需实现接口，达到代理类无侵入。 使用cglib需要引入cglib的jar包，如果你已经有spring-core的jar包，则无需引入，因为spring中包含了cglib。 cglib的Maven坐标12345&lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib&lt;/artifactId&gt; &lt;version&gt;3.2.5&lt;/version&gt;&lt;/dependency&gt; 举例：保存用户功能的动态代理实现 目标对象：UserDao 12345678package com.cglib;public class UserDao&#123;truepublic void save() &#123;truetrueSystem.out.println(\"保存数据\");true&#125;&#125; 代理对象：ProxyFactory 123456789101112131415161718192021222324252627282930313233343536package com.cglib;import java.lang.reflect.Method;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;public class ProxyFactory implements MethodInterceptor&#123;trueprivate Object target;//维护一个目标对象truepublic ProxyFactory(Object target) &#123;truetruethis.target = target;true&#125;truetrue//为目标对象生成代理对象truepublic Object getProxyInstance() &#123;truetrue//工具类truetrueEnhancer en = new Enhancer();truetrue//设置父类truetrueen.setSuperclass(target.getClass());truetrue//设置回调函数truetrueen.setCallback(this);truetrue//创建子类对象代理truetruereturn en.create();true&#125;true@Overridetruepublic Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;truetrueSystem.out.println(\"开启事务\");truetrue// 执行目标对象的方法truetrueObject returnValue = method.invoke(target, args);truetrueSystem.out.println(\"关闭事务\");truetruereturn null;true&#125;&#125; 测试类：TestProxy 123456789101112131415161718package com.cglib;import org.junit.Test;public class TestProxy &#123;true@Testtruepublic void testCglibProxy()&#123;truetrue//目标对象truetrueUserDao target = new UserDao();truetrueSystem.out.println(target.getClass());truetrue//代理对象truetrueUserDao proxy = (UserDao) new ProxyFactory(target).getProxyInstance();truetrueSystem.out.println(proxy.getClass());truetrue//执行代理对象方法truetrueproxy.save();true&#125;&#125; 输出结果 12345class com.cglib.UserDaoclass com.cglib.UserDao$$EnhancerByCGLIB$$552188b6开启事务保存数据关闭事务 五、总结 静态代理实现较简单，只要代理对象对目标对象进行包装，即可实现增强功能，但静态代理只能为一个目标对象服务，如果目标对象过多，则会产生很多代理类。 JDK动态代理需要目标对象实现业务接口，代理类只需实现InvocationHandler接口。 动态代理生成的类为 lass com.sun.proxy.$Proxy4，cglib代理生成的类为class com.cglib.UserDao$$EnhancerByCGLIB$$552188b6。 静态代理在编译时产生class字节码文件，可以直接使用，效率高。 动态代理必须实现InvocationHandler接口，通过反射代理方法，比较消耗系统性能，但可以减少代理类的数量，使用更灵活。 cglib代理无需实现接口，通过生成类字节码实现代理，比反射稍快，不存在性能问题，但cglib会继承目标对象，需要重写方法，所以目标对象不能为final类。 六、相关资料代理模式相关知识 代理模式及Java实现动态代理 设计模式读书笔记 - 代理模式 JDK动态代理实现原理 Java 动态代理机制分析及扩展 Java代理(jdk静态代理、动态代理和cglib动态代理) AOP的底层实现-CGLIB动态代理和JDK动态代理 深入浅出CGlib-打造无入侵的类代理 Spring AOP 实现原理与 CGLIB 应用 UML相关知识 博客 - UML类图与类的关系详解 goole图书 -《UML建模实例详解》","tags":[{"name":"代理模式","slug":"代理模式","permalink":"https://soarkey.github.io/tags/代理模式/"}]},{"title":"Maven小试牛刀【1】","date":"2017-07-17T00:00:00.000Z","path":"2017/07/17/Maven小试牛刀【1】/","text":"一、Maven简介一个软件构建的生命周期有：清除–&gt; 编译–&gt;测试–&gt;报告–&gt;打包–&gt;安装–&gt;部署 Apache Maven，就是一个一个采用纯Java编写的软件项目管理及自动构建工具，由Apache软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断（pom.xml）能管理一个项目的构建、报告和文档等步骤。 Maven也可被用于构建和管理各种项目，例如C#，Ruby，Scala和其他语言编写的项目。Maven曾是Jakarta项目的子项目，现为由Apache软件基金会主持的独立Apache项目。 二、下载MavenMaven官网 如果速度较慢的话，可以尝试在CSDN下载，这里提供Maven3.5.0的链接Maven3.5.0 下载之后直接将Maven解压到文件夹即可。 三、配置MavenMaven的运行需要依赖JDK，所以先要确认你是否成功安装了JDK，打开cmd，输入java -version出现以下结果说明配置正确。1234C:\\Users\\XXX&gt;java -versionjava version \"1.8.0_121\"Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode) 如果没有安装JDK，可以参照这篇文章进行安装配置：JDK安装与配置 接下来进行Maven的配置，打开控制面板-&gt;系统-&gt;高级系统设置-&gt;环境变量，在系统变量处加入以下环境变量123M2_HOME=你的Maven安装路径M2=%M2_HOME%\\binMAVEN_OPTS=-Xms256m -Xmx512m 之后在系统变量Path的末尾加入 ;%M2% 即可。 以上只针对Windows，其他系统可以参照这篇文档：极客学院-wiki-Maven环境变量配置 四、运行Maven打开cmd，输入mvn -v，如果出现下面的结果，说明已经安装成功了。1234567C:\\Users\\XXX&gt;mvn -vApache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00)Maven home: C:\\Program Files\\apache-maven-3.5.0\\bin\\..Java version: 1.8.0_121, vendor: Oracle CorporationJava home: C:\\Program Files\\Java\\jdk1.8.0_121\\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot; 五、修改默认仓库路径Maven默认会在${user}/.m2/repository/ (如：C:/Users/XXX/.m2/repository/)目录下建立仓库，而C盘通常是系统盘，如果文件过多会影响系统速度，因此需要修改。 打开Maven的安装路径，找到conf/settings.xml，在文件中搜索repository，可以找到以下位置123456789&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; 可以看到默认的仓库路径，我们在后面添加以下代码（仓库路径根据自己喜好而定）12&lt;!-- 配置本地maven仓库路径 --&gt;&lt;localRepository&gt;C:/Program Files/apache-maven-3.5.0/repository&lt;/localRepository&gt; 六、第一个Maven项目1.建立以下目录结构12345678910HelloMaven|-src| |--main | | |-java| | |-resources| |-test| |-java| |-resources|-target|-pom.xml 其中pom.xml文件配置如下1234567891011121314151617181920&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.maven&lt;/groupId&gt; &lt;artifactId&gt;Hello&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;true&lt;properties&gt;truetrue&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;true&lt;/properties&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;HelloMaven&lt;/name&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.9&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2.创建java类在src/main/java/cn/maven目录下新建文件Hello.java记得保存时要以UTF-8格式保存，内容如下 1234567package cn.maven;public class Hello&#123;truepublic String getValue()&#123;true return \"Hello Maven\";true&#125;&#125; 3.创建测试类在/src/test/java/cn/maven目录下新建测试文件TestHello.java，内容如下12345678910package cn.maven;import org.junit.Test;public class TestHello &#123;true@Testtruepublic void testGetValue()&#123;truetrueHello h = new Hello();truetrueSystem.out.println(h.getValue()); true&#125;&#125; 4.项目编译与测试在项目根路径打开cmd，输入命令mvn compile123456789101112131415161718192021E:\\code\\maven&gt; mvn compile[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Hello 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Hello ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 0 resource[INFO][INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ Hello ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to E:\\code\\maven\\target\\classes[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.397 s[INFO] Finished at: 2017-07-17T11:05:42+08:00[INFO] Final Memory: 13M/257M[INFO] ------------------------------------------------------------------------ 出现BUILD SUCCESS说明maven项目编译成功！接下来输入mvn test即可执行maven测试12345678910111213141516171819202122232425262728293031323334353637383940414243E:\\code\\maven&gt; mvn test[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Hello 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Hello ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 0 resource[INFO][INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ Hello ---[INFO] Nothing to compile - all classes are up to date[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ Hello ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 0 resource[INFO][INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ Hello ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to E:\\后端视频\\code\\maven\\target\\test-classes[INFO][INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ Hello ---[INFO] Surefire report directory: E:\\后端视频\\code\\maven\\target\\surefire-reports------------------------------------------------------- T E S T S-------------------------------------------------------Running cn.maven.TestHelloHello MavenTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 secResults :Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 1.621 s[INFO] Finished at: 2017-07-17T11:11:47+08:00[INFO] Final Memory: 15M/264M[INFO] ------------------------------------------------------------------------ 可以看到测试类里的结构输出正确，为“Hello Maven‘’。 至此，恭喜你已经完成了第一个Maven项目！ 感谢您的阅读，希望能对您有所帮助！ 更多关于Maven的文章，请参阅： 暂无","tags":[{"name":"Maven","slug":"Maven","permalink":"https://soarkey.github.io/tags/Maven/"}]},{"title":"持久层设计理念的演变","date":"2017-07-12T00:00:00.000Z","path":"2017/07/12/持久层设计理念的演变/","text":"MVC架构中的Model层是与业务逻辑和数据关联最为紧密的部分，持久层作为Model层面的主要组成，其设计的优劣势必对系统的整体表现产生至关重要的影响。 —— 《深入浅出Hibernate》 持久层是什么持久层是在系统逻辑层面上，专注于实现数据持久化的一个相对独立的领域。说白了就是应用与数据库之间沟通的“桥梁”，将数据库代码和应用业务代码从耦合的关系中脱离出来。 持久层设计与解耦思想演进简而言之，解耦就是将原先关联程度比较高的两个事物或者多个事物通过一些手段来达到降低其关联程度的效果。 解耦合设计要达到的目标 1.应用层解耦合–应用逻辑与数据逻辑相分离 2.资源层解耦合–逻辑结构与物理结构相分离 1.早期混乱的JDBC早期的对数据库的操作功能是在JDBC基础上直接实现的，其中糅合着大量的JDBC连接代码和SQL代码，显得极为混乱。例如：用户查询账户余额1234567891011121314151617181920212223242526272829303132333435363738public double selectAmount(int id) &#123;trueConnection conn = null;trueStatement stmt = null;trueResultSet rs = null;truedouble amount = 0;truetry&#123;truetrueClass.forName(\"com.mysql.jdbc.Driver\");truetrueconn = DriverManager.getConnection(truetruetruetrue\"jdbc:mysql://localhost:3306/demo\", //urltruetruetruetrue\"root\", //usertruetruetruetrue\"123456\" //passwordtruetruetruetrue);truetruestmt = conn.createStatement();truetrueString sql = \"select amount from user where id = \"+id+\";\";truetruers = stmt.executeQuery(sql);truetruewhile(rs.next())&#123;truetruetrueamount = rs.getDouble(1);truetrue&#125;true&#125; catch (Exception e) &#123;truetruee.printStackTrace();true&#125; finally &#123;truetrueif (conn != null) &#123;truetruetruetry &#123;truetruetruetrueif (stmt != null) &#123;truetruetruetruetruetry &#123;truetruetruetruetruetruestmt.close();truetruetruetruetrue&#125; catch (Exception e) &#123;truetruetruetruetruetruee.printStackTrace();truetruetruetruetrue&#125;truetruetruetrue&#125;truetruetruetrueconn.close();truetruetrue&#125; catch (Exception e) &#123;truetruetruetruee.printStackTrace();truetruetrue&#125;truetrue&#125;true&#125;truereturn amount;&#125; 上面这段代码虽然完成了要求的功能，但SQL和业务的相互耦合会使得日后的修改变得非常困难，而且一旦数据库发生变更，对与开发者而言将会是一个噩梦。 2.XML配置文件实现参数化相比于将数据库连接用户密码暴露在数据库操作代码中，利用XML文件配置连接将会是一个更便捷高效的方法。 举个例子，XML配置文件可以这样写123456&lt;database name=\"mysqldb\"&gt; &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt; &lt;url&gt;jdbc:mysql://localhost:3306/demo&lt;/url&gt; &lt;user&gt;root&lt;/user&gt; &lt;password&gt;root&lt;/password&gt;&lt;/database&gt; 然后再用Java读取XML文件进行连接配置，这样就可以省去日后数据库用户名和密码变更的麻烦了，而且只需要维护一份XML文件，工作量相比之前大大减少了。 3.JDBC工具类对之前的模式进行重新审视后，我们发现这其中有一个共同点，就是每个业务中都将涉及获取数据库连接的获取和释放，能不能将这些共同的代码抽离出来呢？ 很自然地，我们就能想到用一个类封装数据库的连接和获取，对外提供统一的方法操作。 代码示例：123456789101112131415161718192021222324252627282930public class DBUtils &#123;truepublic static Connection getConnection() &#123;truetrueConnection conn = null;truetrueString url = \"jdbc:mysql://localhost:3306/demo\";truetrueString username = \"root\";truetrueString password = \"123456\";truetruetry&#123;truetruetrueClass.forName(\"com.mysql.jdbc.Driver\");truetruetrueconn = (Connection) DriverManager.getConnection(url,username,password);truetruetrueif(conn != null)&#123;truetruetruetrueSystem.out.println(\"hello\");truetruetrue&#125;truetrue&#125;catch(Exception e)&#123;truetruetruee.printStackTrace();truetrue&#125;truetruereturn conn;true&#125;truepublic static void closeConnection(Connection conn) &#123;truetruetry&#123;truetruetrueconn.close();truetrue&#125; catch (SQLException e) &#123;truetruetruee.printStackTrace();truetrue&#125;true&#125;&#125; 4.DAO模式的出现虽然XML文档配置是个不错的方法，但是我们的系统可能有成百上千的业务过程，每一个业务处理中都涉及许多重复不必要的数据库连接的获取、操作和释放过程，代码冗余，效率很低。为了解决这个问题，我们便引入了DAO(Data Access Object)模式，通俗地说就是将对数据的增删改查操作统一封装到数据操作类中，将业务流程封装到业务逻辑类中，从而将数据访问和业务逻辑分离开来，解除两者之间的耦合关系。 DAO模式的实现层次图： 某种意义上说，DAO = Data + Accessor + Domain Object Domain Object即是代码中常用的Java Bean对象 简单描述：我们以用户登录为例，来讲解DAO模式从上到下的层次。 （1）业务逻辑类 只负责业务的实现过程，而无需顾及数据的具体操作，例如1234567public Class UserService&#123; public User login(String username, String password)&#123; UserDao userDao = new UserDao(); User user = userDao.login(username,password); return user; &#125;&#125; （2）数据库操作类1234567891011121314151617public Class UserDao&#123; public User login(String username, String password)&#123;truetrueString sql = \"...\"; //sql代码truetrueConnection conn = (Connection) JDBCUtil.getConnection();truetrueUser user = null;truetrue//... 对数据库的具体操作省略truetruereturn user; &#125; public void save()&#123; //... &#125; public void delete()&#123; //... &#125;&#125; （3）Java Bean类1234567public class User&#123;trueprivate String id;trueprivate String username;trueprivate String password;true//... getters和setters方法&#125; 这种方式很好地将数据访问底层实现和业务层分离开来，意味着我们可以在上层不变的前提下，仅仅通过更换底层实现来切换数据库访问的机制，从而可以让我们的应用部署在不同的数据库平台上。更重要的是，我们可以加入数据库连接池及各种缓存机制（如Statement Cache，Data Cache），从而提升整个系统的性能。 但是，换个角度思考，我们虽然能够通过静态更换底层实现实现部署到不同的数据库平台上，但是这样的方式在面对较大的系统时，部署和维护工作将会变得非常棘手。 在面向对象设计中“可复用设计”中有一条原则，叫做“开闭原则”–对扩展开放，对修改关闭，说的通俗一点就是软件系统中包含的各种组件，例如模块、类以及功能等等，应该在不修改现有代码的基础上，引入新功能。我们应该把DAO模式中存在的变动因素屏蔽在系统之外。 由此，在DAO层引入了工厂模式(Factory)、代理模式(Proxy)。 5.工厂模式和代理模式由于需要针对不同的数据库提供各自的DAO实现，很自然我们就联想到可以抽象出一个调用接口，通过调用接口作为调用界面和规范，从而避免对代码具体实现的依赖。 1.工厂模式作为最常用的创建模式，工厂模式可以实现按需加载相应的实现提供给业务层。12UserDao userDao = DAOFactory.getDAO(UserDao.class);User user = userDao.getUser(id); 工厂模式UML图： 以下简易实例中使用工厂模式实现DAO类的按需创建。12345678910public class DAOFactory&#123;truepublic static UserDao getUserDAO()&#123;truetruereturn new UserDao();true&#125;truepublic static xxxDao getxxxDAO()&#123;truetruereturn new xxxDao();true&#125;true//...&#125; 业务代码就变成了这样123456public Class UserService&#123; public User login(String username, String password)&#123; User user = DAOFactory.getUserDAO().login(username,password); return user; &#125;&#125; 看起来不错，但是每次都要通过DAOFactory的方法创建DAO类，导致整段代码中充斥着重复的部分，有没有办法解决它呢？ 2.代理模式代理模式的引入正好解决了以上出现的问题。怎么回事呢？让我们先来了解一下代理模式是什么。 代理模式的UML图 一句话概括，代理模式就是在你和目标对象中间设置一个代理，你只需要告诉代理你现在需要登录，代理就会自动帮你把新建对象，操作对象等等全部搞定了。 让我们看看经过代理模式改造之后的代码：1234567public class UserProxy&#123;truepublic static User login(String username, String password)&#123;truetrueUser user = DAOFactory.getUserDAO().login(username,password);truetruereturn user;true&#125;true//...&#125; 于是业务代码就变得非常简洁，看起来比最开始的业务层代码好多了。12345public Class UserService&#123; public User login(String username, String password)&#123; return UserProxy.login(username,password); &#125;&#125; 结语到现在，我们已经差不多解决了持久层的解耦合问题了，那么持久层的设计思想是不是到此就结束了呢？我们是不是已经找到了适应所有web应用的模式呢？ 不是的。无论什么应用，都无法脱离对资源的管理和使用，对于持久层而言，资源的调度和管理就显得尤为重要。由于对数据库的操作过程中存在许多消耗资源的“重量级”操作，所以优化持久层的资源管理调度也是持久层设计理念发展过程中希望达到的目标。可见一个好的设计能够提升性能，提升系统的伸缩性、可维护性。 那么我们要怎么优化持久层呢？ORM(Object/Relational Mapper)思想乃至持久层框架的出现是为了解决什么问题呢？Hibernate、Apache OJB、iBatis是如何对持久层进行处理的呢？我们能不能一劳永逸地解决持久层存在的问题呢？ 敬请期待下一篇博文，带你探秘持久层的设计理念。 感谢您的阅读！如果对您有一点点帮助的话，那将是我莫大的荣幸！ 相关学习资源 XML： 1.菜鸟教程-XML教程 2.慕课网-Java眼中的XML-文件读取 设计模式： 1.java设计模式-工厂模式 2.维基百科-代理模式","tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://soarkey.github.io/tags/设计模式/"},{"name":"hibernate","slug":"hibernate","permalink":"https://soarkey.github.io/tags/hibernate/"}]},{"title":"马云清华EMBA演讲：一个人要成功靠情商 要不败靠智商","date":"2017-04-21T00:00:00.000Z","path":"2017/04/21/马云清华EMBA演讲/","text":"转载 10月20日，马云走进清华EMBA课堂，发表了题为“企业家精神与未来”的主题演讲。 导读10月20日，阿里巴巴董事局主席马云作为清华大学经济管理学院顾问委员会委员，走进清华EMBA课堂，发表了题为“企业家精神与未来”的主题演讲。 在半小时的演讲中，马云谈及人性、教育、学习、企业家精神、未来等。 马云承认自己书看得不多，但他不认为读书无用。他说，一个人要成功，靠情商；一个人要不败，靠智商。自己跟其他企业家的区别在于，喜欢把人当书去看，而不是把书当人看。 附：马云演讲实录大家好！我心里觉得有一个工作我从来没忘记过，我是一个老师出身，学的是师范，在大学教了六年书，创业的时候我自己有一个东西从来没丢过，那就是当老师，我可能花了很多时间，比任何一个CEO都多的时间，在外面交流、讲课、聊天。 可能没有像我这么高调的一个人，到处去讲，这是职业病。因为老师一个很重要的职责就是分享自己，很多知识不是老师的，但是你必须要去分享。我在大学里面教的六年书中，其中做了三年班主任，当班主任的经历，让我受益匪浅。 最重要的，我当老师学到了两样东西。第一，老师永远希望学生超过自己，这个素质也是当CEO一定要有的一个素质。天下的老师都希望这个学生当老板，那个学生成为银行家，这个学生当了县长，当了书记，那个学生当了优秀的科学家，没有一个老师希望这个学生被双规了，那个学生破产了，那个进了监狱，所以老师最佳的产品就是学生，学生越好，老师才会越好。 这是我当老师学到的第一样东西，这么多年来，伴随我整个生命。我真正出来创业是在1995年，那一年我离开大学，但是当老师是我永远的一种职业病，我希望加入阿里巴巴的员工每个人都超越我，每个人都超越自己，这是骨子里的东西。 第二，老师很重要的职责就是经验分享，不管别人要听不要听，你要自己知道的要跟大家分享。即使我不懂，很专业的事情，我也学会之后再分享。老师也要不断学习。在中国企业家里面，估计我应该排前十个。创业以来，我没有再回大学认认真真坐下来听过一个月的课，但是我几乎跑遍了很多国家，很多公司。 比尔·盖茨、巴菲特、只要是全世界今天还活着的那些老大们，企业家、政治家，我能有机会，我都愿意见，因为都是学习，并非只有坐在校园里面才是学习。我书确实看的不多，这点我承认。但我从来没说过读书无用。 一个人要成功，靠情商；一个人要不败，靠智商。成功有时候你情商很高，搞定一个人，搞定一个机会，也许你就起来了。但是你要不败，一定是靠智商，智商就是你要不断的学习。 智商低的人，没有愿意人跟着你干的；情商低的人，是没有办法管理一批智商高的人。智商高的人有时候是很难管的，你如何用情商？这个情商不是跟人斗。 一个老板要成功，绝大部分要有三个商，第一情商（EQ），第二智商（IQ），这两个之外，还有一个爱商，大爱之商。你如果没有对未来、对社会、对将来、对人之间有一种爱心的话，真正的人才不会跟着你的。这三个商合在一起，你才能成为一个领导者。 我自己觉得当老师比我的另外一个身份重要。你们看各种各样的老师，老师的成功往往是从学生当中学到很多东西。我过去觉得自己可能跟其他企业家的区别在于，我喜欢把人当书去看，而不是把书当人看。有些书我看了第一页，前面几页，我就知道后面的故事，你是能够感觉到一个人的境界，一本书的境界。有些书我一天翻了就扔掉，有些书我可能像老子的道德经，儒家的论语，我可能看十年，我有空没空都要看，短短几十个字，我可能看三四个月，还在翻来覆去的看这个东西，因为这中间是要慢慢去体会的。 最近大家都在讲文化自信，文化自信很重要的一点，文化自信是基于你对其他文化的理解和尊重。上个月我在美国纽约参加一个很有名的一个机构的座谈，我是一个中国人，他们把所有的高管叫过来跟我对话，大家都提到一个问题，中美之间的冲突，东西方文化之间的冲突。我听到他们都在批判我们中国这个不对那个不对，我说：“中国是以儒释道文化为基础的，请问大家都在批评中国，在座二十几个老外，请问谁看过老子的道德经？或者，孔夫子是你们所有人都知道的，在座的有没有人看过一篇论语？有没有人看过一篇我们的佛经？”这些老外们说“没有”。当时，我告诉他们，我看过五遍圣经。虽然我没在美国读过一天书，但是我大学那时候学英文，我把圣经当做英文教材来看。我们的儒释道文化之强盛是老外没有体验到的。对另外的文化不了解，你就没有资格批评。 几乎每个国家企业，只要是企业，都有强大的文化作为背景。而文化的根源是跟宗教、信仰是有关的。什么是中国企业？中国企业今天来讲，我们当然可以学日本、韩国、欧美。人家是有根基的，欧美这套体系是有基本的基督教的文化。以色列企业有自己的文化，日本的企业也是有自己的文化，我从多年以前开始觉得如果阿里有一天希望成功的话，我们必须在中国的文化里面找到自己的根基。 所以我才会去听听道家讲的，很有道理，无为而治，“无为”是什么意思？大家明白没有？每个人的说法都不一样。我的理解，无为，就是你明知道没有结果仍为之。人想透一点，不管你多牛，八十岁九十岁，来的的地方不同，去的地方一样，全是火葬场，人都要死的，为什么还要那么努力？企业也一样，从企业成立第一天起就要想好关门的那一天，但是仍然要快快乐乐的过好每一天。道家永远讲究和谐，跟自然的和谐。 关于企业管理，很多人学MBA。这么多年了，我觉得MBA是很了不起的一个东西，我认为MBA的体系很好。但是不要以为MBA一定能做好生意。另外，MBA讲的太多成功案例，我认为企业应该多学习失败，因为商场如战场。商场是没有演习的，冲出去，说我再来一遍行不行？不行，像破产就破产了。做生意的人都是聪明的人，那么多聪明的老板倒下了，你为什么没有倒下？ 我走访过很多老兵，老兵很有意思，会告诉你你要知道哪个位置有冷弹，哪个地方有地雷，你搞清楚，保存自己才能活下来。类似的，我们也必须学习其他企业失败的经验教训，但是千万不要把MBA给神化了，MBA把你的公司战略各个方面清晰，这是一个工具，但你不要以为有了工具你就能成功。 儒家思想在中国是最牛的。儒家思想讲社会管理治理体系，讲人与社会如何和谐相处，这中间能够学到很多牛的管理。真正的管理是什么？管理是管理人性，我们这几天开了战略会议，我对技术是很遥远的，一会儿别问我技术问题。但是对人性的理解，对社会未来趋势的把握，这方面你是可以学习的。儒家思想很了不起，对社会治理的体系，封建社会两千多年靠的是儒家思想这么下来，它有很多的东西在里头。大家要认真的去体会。 佛家思想讲究人与心之间配合，你在佛家也能学到很多东西。你生意做到一定程度的时候，没有佛家那种思想，也不行。如果你在竞争之中没有道家思想，也没有机会赢。如果公司长到一定程度，你不懂得儒家思想的组织体系建设，你没有机会能够持久。当然你要在走向全球的时候，如果你不懂基督教的文化，你不懂得伊斯兰教的文化，你是没有办法走遍世界的。 我自己觉得做生意就是一个学习过程，如果你不了解你的员工，你的企业不可能有创新。如果你不去了解你的竞争对手，你的企业永远不会成长。道家讲心中无敌，无敌于天下，不是真正的不尊重对手，而是真正尊重对手，才懂得我的对手在更高。你如果这种状态，你的企业自然会做的不一样。我想如果你在碰到竞争的时候，不妨思考两种，第一，道家思想的竞争是很有意思的，太极的竞争思想是世界上第一的。西方也是竞争思想，基督教是是黑和白之间。道家的思想将黑和白之间交融，我告诉大家，企业家如果你出去做生意，碰到竞争，火气就特别大，恨不得把竞争对手按到马桶里，你是做不长的。因为对手到处都在，按死了这个，还出来一个，你就变成了一个职业杀手，你成不了大事。 我们在竞争过程当中要思考的就是这种对手要尊重他，会战者不怒，真正会打仗的不会生气的。为什么计算机会超过人类？计算机没情趣，我有时候下棋，我下围棋，我是一定找比我技术差的人下，就是找乐趣。如果被人家杀的痛苦，何必呢。所以会战的真正的高手没有情趣，我生气是好不容易搞起来了，被他拦腰砍断，我会生气，会输。做企业也一样，你如果动不动发员工的脾气，甚至对竞争对手深恶痛绝，你的企业做不大的。谁都是你的对手，小有小的对手，中有中的对手，大有大的对手，国家有国家的对手，时代有时代的对手，如果竞争过程中，你越来越痛苦，对手越来越高兴，你一定做错了。应该是对手越来越痛苦，你应该越来越高兴，那就对了。竞争我们是要去思考的，你如果担心竞争就不要做生意，担心失败就不要做生意。谁保证你一定不会失败？你要担心死就不要活着。 要保持良好的心态，阿里这么多年下来，我们这帮人保持良好的心态很重要。不管别人怎么激怒我们，我们尽量做到不怒。不管市场多么混乱，在混乱的时候我们冷静，在外面特别冷静的时候，我们内部得搞混乱了。这个是一种完全的调整心态的策略，所以我想我们在整个学习商业中最重要的就是学习文化，学习组织的方式，学习儒家组织好自己，适应社会，道家讲适应整个自然环境，佛家讲人怎么把自己的行为和行为统一起来。企业做大的时候，麻烦多了去了。你怎么干都是错的，怎么办呢？看看经也蛮好。当然挺难看懂的，我不知道你们，我学英文，我听老外讲佛经的时候，我特别听的懂，中国一些人讲，我反而听不懂，故弄玄虚的太多。我也去寺庙，我是拜菩萨，到了道家我觉得那个也很好，孔夫子也不错，到了教堂里面我也是这样，他们是比我们聪明，从每个人身上你能够学到很多东西。 中国和西方之间，基督教文化非常了不起，圣经是世界上最牛逼的畅销书，佛经没有几个人看得懂，它不是畅销书，它要靠你自己悟，悟就麻烦了。菩萨手这样一弄，有的人明白了，其他人完全不明白，想的完全不一样。悟也让我们悟到了精髓，悟也让我们东方文化很难全球传播。这方面，真正悟到的高手还是相当的高，但绝大部分的人是能听的懂，每个故事都有对应。我希望我们在这里面，每个做企业的人你们面对的是巨大的市场，巨大的竞争，你们面对的是自己的员工，你面对的是客户，你面对的是股东，你面对的是政府的监管，你面对的是各种各样不可预测的未来。所以如果没有良好的心态，没有强大的内心文化，知道自己要什么，放弃什么，每个人知道自己有什么，你到底要什么，你要放弃什么，就没法做好企业。企业如人，企业要想明白，你们企业有什么，最重要的是你放弃什么，没想明白自己放弃什么的人是根本不明白自己坚持什么，企业也一样。企业经常是我能干这个，谁都能干这个，问题是你该干什么，不是你能干什么，而是该干什么。这些问题，这些思考都是从文化积累出来的。 讲了这些以后，我想讲一些未来，我对未来的想法相对比较感兴趣。我刚才讲了，MBA是知识的积累，没有知识，你要想不失败，一定要靠知识，你要想成功，也许情商管用。但是对未来，大家知道我对经济学家意见挺大的。我尊重经济学，但是我不尊重今天的很多经济学家。我跟很多经济学家聊天聊过，我都听不懂他们在说什么，很多经济学家讲的跟脱口秀一样，经济学家是研究，根据数据来研究昨天的规律，以便未来的人决策做参考。第一，我们在中国数据是最缺的，第二，这帮经济学家是研究学问的人，研究学问的人他讲的很多话其实是不太听的懂的。今天在电视上面胡说八道，另外一个研究昨天的人和研究未来的人是完全不同的视角，经济学家原则上是研究昨天的，春江水暖鸭先知，企业家是对未来的判断，我们必须对未来判断。 我希望企业家一定要对未来进行判断。我告诉大家的是，今天的时代是人类历史上的第三次技术革命，远远超过我们在座人的想象。第一次技术革命，工业革命大家知道，工业革命出来以后，对社会的冲击超过了大家的想象，煤成为了主要的动能。人的体力，人的能力，原来人的力量比不了机器，机器出来的时候，人就基本放弃了，力气比不过机器。导致的直接结果是第一次世界大战，力量平衡发生了变化。第二次技术革命，能源革命，石油成为了主要的能源，直接的结果，第二次世界大战。这次技术革命是脑袋的释放，是智慧的释放，是知识的释放，是大脑的解放。 每一次技术革命出来以后，人类往往根本没有准备。例如第一次技术革命来的时候，汽车出来的时候，第一个生气的是马车夫，必须把汽车给砸了，要不砸了它，他们就没饭吃了，那时候马车夫是白领技术活，突然汽车来了，就没有马车夫了。马车夫到政府抗议，怪汽车破坏了他们的就业，最后欧洲曾经出过一个法律，汽车不允许上路。为什么？很多的就业会被取消。 我小时候，那时候修皮鞋可是技术活，裁缝也是技术活，我爸一个月的工资买不了一双鞋，当然要修。结果来了一个流水线革命，这些活都没了。我告诉大家，未来三十年全世界今天看来很多技术活的东西都没了，人类从发明机器的时候，要明白机器会比你人的力气大。人类在发明火车、飞机的时候，人一定要知道我速度跑不过它。人类发明电脑这一天，人类要知道电脑一定比你聪明，否则你发明它干什么。但是我告诉大家一个悲剧的事情，电脑会越来越聪明，电脑会让机器变成人。过去二十年我们把人变成了机器，未来二三十年我们把机器变成了人，机器会越来越聪明。机器打败人能够解决的问题，只是给你丧失了一点自信心而已，机器做人做不到的事情，要解决的人解决不了的问题，这才是真正的牛。二三十年以后，我们要记住，昨天的机器只是我们的工具，未来的机器将会成为人类的合作伙伴。必须对未来有判断，必须知道我这个行业会不会改变。 很多人讨厌互联网，摧毁了传统机器，是吗？这是缺乏远见，是落后思想，是马车夫思想，认为它摧毁了我。你怎么讨厌都没用，这是一场革命。而且告诉大家，这个车已经发动了，任何一场技术革命都要五十年，前面二十几年，一定是纯技术公司的折腾，未来三十年是技术在社会各方面的运用。互联网到现在为止刚好二十年上下，无论facebook也好，谷歌也好，腾讯也好，阿里也好，折腾来折腾去，关键的是未来三十年。如果这些公司不能参与到社会变革，不能参与帮助更多的企业和老百姓搬到网上去，搬到未来的数据时代去，这些企业都会死掉。不要赢了一场战役，但却丢失了一场战争。未来三十年90%的企业都不得不变数据化，未来三十年数据将成为真正最强大的能源，这个变革绝大部分人没想好，包括大学教育会发生天翻地覆的变化。 我刚才看清华的资料，挺有意思，清华还是很有远见的，已经开始互联网教育。未来的大学教育，如果你继续教知识，该教还得教，但是机器比你厉害不知道多少倍，机器不生气，没情趣，不怕饿，插上电，死干。你看一遍，我们顶尖的围棋高手能想到二十步，已经顶尖了，机器这哥们两万步都算好了，你没脾气。所以你要拼知识，未来很难，未来的大学要多关注创造力和想象力的培养。但是中国今天有多少大学有创造力和想象力？因为人和机器拼知识，我反正放弃了，就等于你要跟火车比谁快，跟飞机比谁能跑远。但是人和机器未来的角逐就是在智慧，在使命，在价值观上面。 学校的学习是什么概念？学习和教育是两个不同的词，“教”教的是知识，“育”育的是文化。人与机器之间的差异，未来知识之间的差异不多，但是文化之间的差异可大了去了。如果我们未来的孩子不在文化上多花时间，琴棋书画，文化是培养出来的，不在这上面努力，完了。你最后越来越沮丧，连机器也搞不过它，必须为我们后代思考这个问题，我们要强化“育”的部分。中国的教育差，中国的教师不差的，中国教师差什么？我们最差的中学学生放到美国都是好的学生，结果未来计算机背的更快，算的比你更快。“教”我们不差，但“育”很差，“育”越差，会让我们越来越原来远离世界，世界会变得非常冷酷。 还有学和习这两个概念，“学”是你在学习知识，为什么很多大学生到公司里面，真的要花很多时间我们把他重新改过，因为他们没有“习”。“习”是犯错误，“习”是一种想象力，“习”是一种文化，所以教育、学习是两个概念，“育”和“习”是对文化来说的，“教”和“学”是对知识结构来说的，从小学、中学、大学的教育，未来三十年是学习能力的竞争，是创新能力的竞争。MBA也要思考这个问题，所有人类可以写清楚的事情，机器可以比你们做的更好。 商业是是一门科学，也是一门艺术。这两个之间如果不结合，麻烦就大了。这是我的一些看法，所以我希望大家去思考未来的企业，一定不是工业时代的标准化和规模化，未来的企业一定是数据时代的个性化、定制化。未来的企业拼的一定是创新的能力，而创新的能力当中，知识很重要，但是文化变得更重要。如果你觉得未来不行，是你的想象力不够，如果你认为未来就这个样子，也是想象力不够。所以MBA该怎么样，企业该怎么样，你今天的选择奠定了未来三十年，未来的三十年很多行业会发生天翻地覆的变化。 每个人想想自己的职业，每个人想想自己的未来，每个人想想自己的孩子，重新设计，这不是危言耸听。这是一个挑战，这是一个机会。机会的关键在于你怎么改变自己。这个真正的会影响，而且速度会越来越快，后面二三十年会越来越快，会加速度，直到五十年以后，世界格局重新开始。世界格局的变化是昨天强的人转瞬之间就会变得弱，当年大清王朝是很牛的，英国算什么！倒过来了，英国还没坐稳凳子呢，美国强大了。现在形势又变了，这是我对大家想强调的，而且不是危言耸听，正在发生，而且速度越来越快。 提问环节 学生：尊敬的马云先生您好！我是EMBA16级的梁栋锐，非常荣幸能听到您刚才给我们精彩的分享。您的很多在人生创业战略还有企业管理方面的很多观点，都影响了我们，包括你开创了电商的先河，前段时间你的演讲，电商已死，中国面临新的环境，您的很多思想归根到底是你的创新的企业家精神的一种体现。美国也是80年代企业家精神，也是推动了美国经济的转型。目前在中国这么一个阶段也面临经济的转型，民营企业也面临很多困境，我想请马云先生给我们分享一下企业家精神在中国的经济和商业管理实践中面临的一些问题和您的建议。 马云： 企业家精神，其实一个企业它的格局决定了未来。什么是格？你的格局决定你的结局，格在我看来，就是时间度，你必须从三十年以后看今天。二十年以后看今天，这叫格，时间之格。局就是从世界来看中国，在中国看自己，有这样的局，你才有可能看得更远一点。其实像我们这样的人，以前学会了爬在山坡上看问题，后来我见了无数的人，他们原来爬到山峰上看问题，我们再爬，爬到珠峰上看看，其实你到了珠峰什么都看不见，我们天天担心的是怎么活下来。大家就没想过做阿里这样的公司大了以后，风险比公司更大。有多少人跟那些爬珠峰的人聊过？山脚下的人，你跑上七千米以后，完全是两回事情，你哪有心情看风景？哪有时间跟边上聊，到了七千米以后，你一步踩错就没了，你身上吃的东西和喝的东西超过分量以后就下不来了。 不要说救别人，你连自己都无法救。他太危险了在上面，到上面空气都没了。我们到今天为止，见各种人以后，只在无人机上看世界。看清以后，一种路子是跟自己讲，我自己赚把钱跑，反正我开了这条线。日本大海啸以后，站在那个高度可以看到有一条路，很多人看不见只能这样跑，如果你从上面判断下来，一定会这样，你可能多了一条路。但问题是你看见的，你要不要跟社会分享，并且建立这条通道，使得房子将来出现问题的时候，社会更多人逃出来，这就是企业家精神，你必须带着使命感，你必须看到以后跟社会分享。不管别人骂你是疯子，是骗子，是十恶不赦的破坏者，你都要讲出来。这个是企业家精神，并且一个人干不了，你必须把团队合在一起，影响更多的人。商业是最大的公益，我们学校很多人看不起商人，商人也看不起学校。我们商业和学校之间的路是多么远？我是学校出来的，教了六年书，我也看不起商人，干了以后，商人是亲了不起的群体。知识很厉害，要变成财富，这个距离是多么的遥远！但是这个如何把它们结合在一起？ 什么是商业？商业有三个要素，我个人理解，结果导向，第二，效率导向，第三公平导向。商业社会第一必须有结果，计划做的很好，教授们不好意思，教授们课上完，工作就结束了。我们战略做完还没开始呢，没有业绩我们就死了。教授不怕学生跑光的，我们员工跑光了，完了。教授可能我少了一个黑板，少了一个电脑，我们什么都少了，我们必须要有结果。政府必须要有结果，学校要有结果，培养人才。公司大家在座有多少是老板？有多少碰到过下个月工资开不了？你算一算还有两个月工资，有多少人碰到过？你就知道下个月的工资在哪，怎么办？这是你知道没有结果一定得死。第二什么叫效率导向？别人干这个事情十块钱，我是否八块钱能干什么？我是否两块钱能干什么？政府同样要有结果，政府效率没有。我们的企业如果人家干这个事情五块钱，你干这个事情六块钱，你是必死无疑。人家干这个事情十个人，你干这个事情八个人，你就赢了。没有效率，谈什么企业！ 企业没办法逼你必须跟我合作，不是强买强卖，你不跟我合作，怎么怎么，没用，还得公平。这三个要素，所以企业家精神是百折不挠，你要有强大的心力，千万不要误判，智商低，情商低，你引不到优秀的人才，引到优秀的人才以后，他给你带来的无数的期盼的价值点，我边上有一帮阿里的人，这些人贡献想法。你是一个情商低的人，你是一个暴君，没有人说话，企业家精神涵盖了很多。企业家精神第一点，让企业更透明，更有效，让企业有钱赚，让消费者有钱赚，互联网企业必须要有很强的企业家精神，你明知道未来三十年很多行业要变革。你要看的，如果这是你能够帮助捐五块钱，今天的金融危机和经济危机所造成的伤害不亚于任何一次局部战争，这个企业家精神，不是你多累，没有人逼你，世界没有马云照转，没有阿里巴巴还有其他公司。你说很累，so what，你干，你有福气。 学生： 马老师您好，我想提一个蚂蚁金服的问题，我之前在中金公司工作，这几年我们公司有些同事加入蚂蚁金服，偶尔会有一些交流，蚂蚁金服跟传统企业合作的时候，自己强调搭建一个金融平台，蚂蚁金服的角色更像是直接参与竞争的竞争者，比如他控股了天弘基金，我的问题是你如何看待做合作者和搭建平台这种之间的关系？直接参与金融行业的竞争，是搭建这个平台之间必须要经历的过程吗？如果是的话，这个过程会有多长？ 马云： 蚂蚁金服现在增长很快，但是蚂蚁金服自己称要搭建一个平台，但是我们进入了很多金融的直接行业，开始对金融行业开始冲击。这是好问题，首先蚂蚁金服不是做金融，昨天我刚刚赶到北京之前一个小时，跟蚂蚁金服交流了我的看法。未来的5+1的新，第一新零售，不是没有电子商务，而是电子商务跟线下零售和物流必须结合为一体，创造新零售，线上线下必须融为一体。第二会出现新制造，由于数据时代，IOT的发展，制造业会发生天翻地覆的变化，如果制造业不变，十年以后制造业会哇哇大叫。第三是新金融，传统的金融是解决20%的大客户、大企业，赚了80%的利润，由于出现了创新型社会，特别是普惠金融，所有的人，我认为80%的年轻人，80%的中小企业，80%的小企业和民营企业都有权利获得金融支持。金融是一个公平的人权，每个人都有这个权利。未来新金融就是服务80%昨天没被服务的人，赚20%的钱，未来就是八二理论。会出现新技术，未来二十年什么样的技术最重要，以及新能源，原来是石油，今天可能是数据，中间我们称之为新文化，文化也会发生很大的变化。文化这个词还是蛮有意思，中国人说我搞文化的，老外这个词很难翻译的，文化，你搞图书馆的，博物馆的，不是，我们不愿意把文化称为娱乐，就是娱乐嘛。唱歌者是艺术家，跳舞的，每个行业都有艺术家，这五个新的变革，肯定在十年以内各行各业会发生。这个发生以后，不是我们推动的，而是社会推动以后，必须适应未来的社会。不是互联网公司破坏了传统行业，而是互联网公司把年轻人知道了未来的船的方向在这，死死拽住，他做的很好，你在那儿哇哇大叫，是改变自己，适应未来。世界上最没用的就是抱怨，成功者永远在找方向，失败者永远在找借口，都是别人害的，很多人还活的挺好，那是你自己惹的。新金融和新思想，我们觉得要建立21世纪的普惠金融，但是我们今天金融的监管很麻烦，所以我们申请牌照不是为了赚更多的钱，我个人觉得拿牌照是拥抱监管，我们获得一个银行牌照，我们就告诉银监会，我们在做什么，他们担心什么，只有这样，被监管也是一种幸福。监管部门同样面临挑战，我们必须让监管部门共同努力，制造出未来的监管。我们的脚42码，绝大部分的公司35码，要么公平，35码，不行，你是28码，你是民营企业，我们人人都想创新，但是其实我们没有给创新更多的机会。创新怎么去跟部门沟通？ 我讲一个具体的例子，结束今天这个话。我去了美国的篮球协会，世界篮球协会，在洛桑，最早的篮球，美国人想了一个办法，做一个篮子，比赛的时候球进去以后，马上有人拿个梯子过来，把球弄下来，继续比赛。他这个蓝筐就是一个篮子，就是比赛将近18年，突然有一个人弄一个底不挺好嘛，把下面那个筐给剪掉，大家很高兴，第一个提出反对的是搬梯子的人说我没就业了，那不行。后来发现速度快了，这个底拿掉以后，原来搞了半天，几比几，现在几十比几，全乱套了，这就是监管的制度要发生很大的变革。任何一个变革都会出现巨大的变革，蚂蚁金服为什么做这个事情？我们要拥抱监管，才会要申请各种牌照。不是我们对这个业务多感兴趣，同时对这块业务只有摸透以后，我们才能跟其他金融机构进行分享，我们是怎么做的。就像我们的零售行业，我们现在在中国的零售占了10%以上，90%的零售都是线下的，把他们摧毁不是我们的目的，摧毁传统零售，我们不能破坏性创新。中国一直以来是推翻式创新，要建设性创新。先建一个新的，告诉大家这个挺好，你要不要改一改？请大家搬过来，我们再共同参加，如果破坏性创新是要死的。中国现在的金融体系，我觉得没有中国过去三十年金融的努力，中国经济不可能有这么好的发展。但是同样要看到未来金融的发展，如果我们不变革，我们80%的人没有机会，我们变革的不是我们冲击的金融，我们变革的，我想我引以为傲的是过去支付宝十多年的努力，终于让金融机构意识到我必须改革自己的服务能力。他们的服务会越来越好，他们的技术会越来越好，他们的努力也越来越大，他们觉得背后有人追着他们的时候，才会用市场机制。这是我们要做到的，而且我们乐此不疲。我们并不是看好了你这个金融、抱歉，中国不缺一家保险公司，中国不缺一家银行，多一家银行少一家银行没有区别，但是中国需要一种新型的迎接未来21世纪金融的体系，这是蚂蚁金服希望做的事情，为此我们会有很多阻力，但是我还是相信马车不会跑赢汽车，最后汽车还是会跑赢马车。","tags":[{"name":"情商","slug":"情商","permalink":"https://soarkey.github.io/tags/情商/"},{"name":"智商","slug":"智商","permalink":"https://soarkey.github.io/tags/智商/"}]},{"title":"灰色预测模型解题步骤","date":"2017-03-16T00:00:00.000Z","path":"2017/03/16/灰色预测模型解题步骤/","text":"灰色模型简介白色系统是指系统内部特征是完全已知的；黑色系统是指系统内部信息完全未知的；而灰色系统是介于白色系统和黑色系统之间的一种系统，灰色系统其内部一部分信息已知，另一部分信息未知或不确定。 灰色预测，是指对系统行为特征值的发展变化进行的预测，对既含有已知信息又含有不确定信息的系统进行的预测，也就是对在一定范围内变化的、与时间序列有关的灰过程进行预测。尽管灰过程中所显示的现象是随机的、杂乱无章的，但毕竟是有序的、有界的，因此得到的数据集合具备潜在的规律。灰色预测是利用这种规律建立灰色模型对灰色系统进行预测。 目前使用最广泛的灰色预测模型就是关于数列预测的一个变量、一阶微分的GM(1,1)模型。它是基于随机的原始时间序列，经按时间累加后所形成的新的时间序列呈现的规律可用一阶线性微分方程的解来逼近。经证明，经一阶线性微分方程的解逼近所揭示的原始时间序列呈指数变化规律。因此，当原始时间序列隐含着指数变化规律时，灰色模型GM(1,1)的预测是非常成功的。 适用情景灰色模型适用于适合数据较少的情况（超过三组就行）,一般是在其他预测方法用不了时采用的方法。 GM(1,1)模型设有原始序列$x^{(0)}=(x^{(0)}(1),x^{(0)}(2),…,x^{(0)}(n)$,n为数据个数。则根据$x^{(0)}$数据建立GM（1,1）模型来实现预测功能步骤如下: 1.一次累加生成序列原始数据一次累加以便弱化随机序列的波动性和随机性，得到新数据序列:$$ x^{(1)}=(x^{(1)}(1),x^{(1)}(2),…,x^{(1)}(n)) \\\\ =(x^{(0)}(1),x^{(0)}(1)+x^{(0)}(2),…,x^{(0)}(1)+x^{(0)}(2)+…+x^{(0)}(n))$$其中,$x^{(1)}(k)$中各数据表示对应前n项数据的累加。$$x^{(1)}(k)=\\sum_{i=1}^{k} x^{(0)}(i), k=1,2,…,n$$ 2.建立灰微分方程与白化微分方程建立灰微分方程：$$ x^{(0)}(k)+az^{(k)}=b, k=2,3,…,n$$对应的白化微分方程为：$$ \\frac{dx^{(1)}}{dt}+ax^{(t)}=b$$ 记$u=\\begin{bmatrix}a ， b \\end{bmatrix}^{T}$ 其中,a、b为待定系数,分别称为发展灰数和内生控制灰数（或称发展系数和灰色作用量）,a的有效区间是（-2,2）,只要求出参数a、b,就能求出$x^{(1)}(k)$,进而求出$x^{(1)}(k+1)$的未来预测值。 3.对累加生成数据做均值生成序列B与常数项向量Y$$ B=\\begin{bmatrix} -\\frac{1}{2}(x^{(1)}(1)+x^{(1)}(2)) &amp; 1 \\\\ -\\frac{1}{2}(x^{(1)}(2)+x^{(1)}(3)) &amp; 1 \\\\ … &amp; … \\\\ -\\frac{1}{2}(x^{(1)}(n-1)+x^{(1)}(n)) &amp; 1 \\\\ \\end{bmatrix}, Y=\\begin{bmatrix} x^{(0)}(2) ， x^{(0)}(3) ， … ， x^{(0)}(n) \\end{bmatrix}^{T}$$ 4.用最小二乘法求解灰参数u由最小二乘法,求使得关于u的函数$J(u)=(Y-Bu)^T(Y-Bu)$达到最小值的u的估计值为$$ \\hat{u}=\\begin{bmatrix} \\hat{a} , \\hat{b} \\end{bmatrix}^T =(B^{T}B)^{-1}B^{T}Y$$最小二乘法——维基百科 5.求解白化微分方程将灰参数$\\hat{u}$带入微分方程$\\frac{dx^{(1)}}{dt}+ax^{(t)}=b$中求解,得$$ \\hat{x}^{(1)}(k+1)=\\begin{pmatrix}x^{(0)}(1)-\\frac{\\hat{b}}{\\hat{a}}\\end{pmatrix}e^{-\\hat{a}k}+\\frac{\\hat{b}}{\\hat{a}},k=0,1,…,n-1,…$$即为GM(1,1)模型。 例题解析北方某城市1986-1992年道理交通噪声平均声级数据见下表 表5.1 城市交通噪声数据/dB(A) 序号 年份 $L_{eq}$ 1 1986 71.1 2 1987 72.4 3 1988 72.4 4 1989 72.1 5 1990 71.4 6 1991 72.0 7 1992 71.6 1.级比检验建立交通噪声平均声级数据时间序列如下:$x^{(1)}=(x^{(1)}(1),x^{(1)}(2),…,x^{(1)}(n))=(71.1,72.4,72.4,72.1,71.4,72.0,71.6)$(1).求级比$\\lambda(k)$,有$$\\lambda(k)=\\frac{x^{(0)}(k-1)}{x^{(0)}(k)},$$$$\\lambda=(\\lambda(2),\\lambda(3),…,\\lambda(7))=(0.982,1,1.0042,1.0098,0.9917,1.0056)$$(2).级比判断由于所有的$\\lambda(k)\\in[0.982,1.0098],k=2,…,7$,故可以用$x^{(0)}$作令人满意的GM(1,1)建模。 2.GM(1,1)建模(1).对原始数据$x^{(1)}$作一次累加，得$$x^{(1)}=(71.1,143.5,215.9,288,359.4,431.4,503)$$(2).构造数据矩阵B及数据向量Y,有$$ B=\\begin{bmatrix} -\\frac{1}{2}(x^{(1)}(1)+x^{(1)}(2)) &amp; 1 \\\\ -\\frac{1}{2}(x^{(1)}(2)+x^{(1)}(3)) &amp; 1 \\\\ … &amp; … \\\\ -\\frac{1}{2}(x^{(1)}(n-1)+x^{(1)}(7)) &amp; 1 \\\\ \\end{bmatrix}, Y=\\begin{bmatrix} x^{(0)}(2) \\\\ x^{(0)}(3) \\\\ … \\\\ x^{(0)}(7) \\end{bmatrix}$$(3)计算:$$\\hat{u}=\\begin{bmatrix}\\hat{a} \\ \\hat{b}\\end{bmatrix}=(B^{T}B)^{-1}B^{T}Y=\\begin{bmatrix}0.0023 \\ 72.6573\\end{bmatrix}$$,于是得到$\\hat{a}=0.0023,\\hat{b}=72.6573$。(4).建立模型:$$\\frac{dx^{(1)}}{dt}+\\hat{a}x^{(t)}=\\hat{b}$$求解，得$$\\hat{x}^{(1)}(k+1)=\\begin{pmatrix}x^{(0)}(1)-\\frac{\\hat{b}}{\\hat{a}}\\end{pmatrix}e^{-\\hat{a}k}+\\frac{\\hat{b}}{\\hat{a}}=-30929e^{-0.0023k}+31000 $$(5).求生成序列预测值$\\hat{x}^{(1)}(k+1)$及模型还原值$\\hat{x}^{(0)}(k+1)$，令$k=1,2,3,4,5,6$,由(4)中解得的函数可算得$\\hat{x}^{(1)}$,其中取$\\hat{x}^{(1)}(1)=\\hat{x}^{(0)}(1)=x^{(0)}(1)=71.1$,由$\\hat{x}^{(0)}(k+1)=\\hat{x}^{(1)}(k+1)-x^{(0)}(k)$,取$k=1,2,3,4,5,6$,得$$\\hat{x}^{(0)}=(\\hat{x}^{(0)}(1),\\hat{x}^{(0)}(2),…,\\hat{x}^{(0)}(7))=(71.1,72.4,72.2,72.1,71.9,71.7,71.6) $$ 3.模型检验模型的各种检验指标值的计算结果见下表: 表5.3.1 GM(1,1)模型检验表 序号 年份 原始值 预测值 残差 相对误差 级比误差 1 1986 71.1 71.1 0 0 2 1987 72.4 72.4057 -0.0057 0.01% 0.0203 3 1988 72.4 72.2362 0.1638 0.23% 0.0023 4 1989 72.1 72.0671 0.0329 0.05% -0.0018 5 1990 71.4 71.8984 -0.4984 0.7% -0.0074 6 1991 72.0 71.7301 0.2699 0.37% 0.0107 7 1992 71.6 71.5622 0.0378 0.05% -0.0032 经验证，该模型的精度较高，可进行预测和预报。 4.附MATLAB代码1234567891011121314151617181920212223% 灰色模型clear;close all;clc;% 输入数据x0=[71.1 72.4 72.4 72.1 71.4 72.0 71.6]'; % 注意为列向量n=length(x0);lamda=x0(1:n-1)./x0(2:n) % 计算级比range=minmax(lamda') % 计算级比的范围x1=cumsum(x0) % 累加运算B=[-0.5*(x1(1:n-1)+x1(2:n)),ones(n-1,1)];Y=x0(2:n);u=B\\Y; % 拟合参数u(1)=a,u(2)=bsyms x(t)x=dsolve(diff(x)+u(1)*x == u(2),x(0) == x0(1)); % 求微分方程的特解 符号解xt=vpa(x,6) % 以小数格式显示微分方程的解yuce1=subs(x,t,[0:n-1]); % 求已知数据的预测值yuce2=double(yuce1); % 符号数转为数值类型，否则无法做差分运算yuce=[x0(1),diff(yuce2)] % 差分运算,还原数据epsilon=x0'-yuce % 计算残差delta=abs(epsilon./x0') % 计算相对误差rho=1-(1-0.5*u(1))/(1+0.5*u(1))*lamda' % 计算级比偏差值，u(1)=a","tags":[{"name":"灰色预测","slug":"灰色预测","permalink":"https://soarkey.github.io/tags/灰色预测/"},{"name":"数学模型","slug":"数学模型","permalink":"https://soarkey.github.io/tags/数学模型/"}]},{"title":"mysql、java数据类型的对应关系","date":"2017-03-11T00:00:00.000Z","path":"2017/03/11/mysql与java的数据类型对应/","text":"mysql数据类型与java数据类型的对应关系： 类型名称 显示长度 数据库类型 JAVA类型 JDBC类型索引(int) VARCHAR L+N VARCHAR java.lang.String 12 CHAR N CHAR java.lang.String 1 BLOB L+N BLOB java.lang.byte[] -4 TEXT 65535 VARCHAR java.lang.String -1 INTEGER 4 INTEGER UNSIGNED java.lang.Long 4 TINYINT 3 TINYINT UNSIGNED java.lang.Integer -6 SMALLINT 5 SMALLINT UNSIGNED java.lang.Integer 5 MEDIUMINT 8 MEDIUMINT UNSIGNED java.lang.Integer 4 BIT 1 BIT java.lang.Boolean -7 BIGINT 20 BIGINT UNSIGNED java.math.BigInteger -5 FLOAT 4+8 FLOAT java.lang.Float 7 DOUBLE 22 DOUBLE java.lang.Double 8 DECIMAL 11 DECIMAL java.math.BigDecimal 3 BOOLEAN 1 同TINYINT ID 11 PK (INTEGER UNSIGNED) java.lang.Long 4 DATE 10 DATE java.sql.Date 91 TIME 8 TIME java.sql.Time 92 DATETIME 19 DATETIME java.sql.Timestamp 93 TIMESTAMP 19 TIMESTAMP java.sql.Timestamp 93 YEAR 4 YEAR java.sql.Date 91","tags":[{"name":"mysql","slug":"mysql","permalink":"https://soarkey.github.io/tags/mysql/"},{"name":"java","slug":"java","permalink":"https://soarkey.github.io/tags/java/"}]},{"title":"关于Cookie技术的介绍","date":"2017-03-05T00:00:00.000Z","path":"2017/03/05/关于cookie的介绍/","text":"cookie基本知识介绍 一、会话技术分类cookie技术：会话数据保存在浏览器客户端session技术：会话数据保存在服务器端 二、cookie使用步骤1.构造Cookie Cookie(java.lang.String name, java.lang.String value) 2.设置Cookie void setPath(java.lang.String uri) 设置有效访问途径 有效路径指的是cookie的有效路径保存位置，浏览器在有效路径下访问服务器时就会带着cookie信息，否则不带cookie信息。 void setMaxAge(int expiry) 设置Cookie有效时间,单位为秒 注意细节：正整数：保存时间长度（1*30*24*60*60) 负整数：实现会话cookie, cookie保存在浏览器内存，随着浏览器的关闭而清除 例如:cookie.setMaxAge(-1) 零：删除同名的cookie void setValue(java.lang.String newValue) 设置Cookie的值 注意细节 Cookie数据类型只能保存非中文字符串类型的。浏览器一般只允许存放300个Cookie，每个站点最多存放20个Cookie，每个Cookie的大小限制为4KB 3.发送Cookie到浏览器保存 void addCookie(Cookie cookie) 发送Cookie给浏览器 4.服务器接收Cookie Cookie[] request.getCookies 接收Cookie 三、Cookie的局限：1.Cookie只能存储字符串类型，不能保存对象 2.只能存储非中文数据 3.&nbsp;1个Cookie的容量不超过4KB 如果要保存非字符串数据，超过4kb内容，只能使用session技术！ 四、Cookie常见错误1.数据类型错误 An invalid character [32] was present in the Cookie value 错误代码:12345SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"\"yyyy-MM-dd HH:mm:ss\"\");String nowTime = simpleDateFormat.format(new java.util.Date());Cookie cookie = new Cookie(\"\"time\"\"nowTime);cookie.setMaxAge(3600);response.addCookie(cookie); 解决方案:123456SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-dd HH:mm:ss&quot;&quot;);这一行代码yyyy-MM-dd和HH:mm:ss中间有个空格就会出错。如果改成这样SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;&quot;yyyy-MM-ddHH:mm:ss&quot;&quot;);把yyyy-MM-dd和HH:mm:ss连着写就没有错了。这是因为cookie不能存放除英文以外的数据，具有很大的局限性","tags":[{"name":"Cookie","slug":"Cookie","permalink":"https://soarkey.github.io/tags/Cookie/"}]},{"title":"利用hexo搭建博客","date":"2017-02-27T00:00:00.000Z","path":"2017/02/27/利用hexo搭建博客/","text":"经过多天的学习与尝试，踩过不少坑，终于是把博客搭建成功了，下面我把我的博客搭建过程分享出来，希望能对你起到一定的帮助！ 准备阶段一、安装Node.js（必须）因为搭建博客所用的hexo框架是基于Node.js开发的，所以我们必须要先安装Node.js。 Node.js官网 安装方法也比较简单，按照默认选项一项一项进行即可。 二、安装Git（必须）Git的作用就是把本地仓库的内容提交到github网站上或者把github上的项目克隆到本地仓库中，对后续的hexo博客部署起着决定性的作用。 Git官网 由于众所周知的原因，国内访问Git比较困难，这里提供了一个国内网盘下载链接。 Git网盘下载地址 三、注册Github账号（必须）github一个通过Git进行版本控制的软件源代码托管服务。我们的hexo博客正是搭建与此基础上，所以需要开发者先申请注册github账号，并且创立一个名为yourname.github.io的仓库（yourname为你的github账户名称）。另外github上聚集了许多著名的技术界公司和顶尖开发者的开源项目，体现了技术前沿的发展趋势，是我们一个不可多得的资料库。Github官网 安装配置Hexo (针对windows)一、 安装hexo创建一个文件夹，命名为blog（根据自己喜好命名）,在Gitbash中执行以下git命令来安装hexo。1$ npm install -g hexo-cli 二、 建立文件安装完成hexo后，执行以下命令，hexo将会在指定文件夹下新建所需文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 三、 生成静态页面执行以下命令，让hexo生成静态页面。1$ hexo generate 可简写为1$ hexo g 执行完后会在blog目录里生成public文件夹，里面存放着发布的博客内容。 四、 在本地预览执行以下命令，启动hexo服务，进行本地hexo博客效果预览与调试。1$ hexo server 可简写为1$ hexo s 完成后打开浏览器输入网址http://localhost:4000，如果正常显示hexo默认初始页面，说明之前的配置正确，hexo已经在本地部署成功。 常见hexo配置错误结语至此，hexo的基本配置步骤已经完成。那我们怎么挑选适合自己博客的主题、更改博客显示的信息以及书写博客呢？请参考下一篇文章《yilia主题的配置与使用》 参考资料：Hexo中文文档","tags":[{"name":"hexo","slug":"hexo","permalink":"https://soarkey.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://soarkey.github.io/tags/blog/"}]}]